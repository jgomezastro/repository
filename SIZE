LSOF(8)                                        System Manager's Manual                                       LSOF(8)

NNAAMMEE
       lsof - list open files

SSYYNNOOPPSSIISS
       llssooff  [  --??aabbCChhKKllnnNNOOPPRRttUUvvVVXX  ]  [  --AA  _A ] [ --cc _c ] [ ++cc _c ] [ ++||--dd _d ] [ ++||--DD _D ] [ ++||--ee _s ] [ ++||--EE ] [ ++||--ff
       [[ccffggGGnn]] ] [ --FF _[_f_] ] [ --gg _[_s_] ] [ --ii _[_i_] ] [ --kk _k ] [ ++||--LL _[_l_] ] [ ++||--mm _m ] [ ++||--MM ] [ --oo _[_o_] ] [ --pp  _s  ]  [
       ++||--rr  _[_t_[_m_<_f_m_t_>_]_]  ] [ --ss _[_p_:_s_] ] [ --SS _[_t_] ] [ --TT _[_t_] ] [ --uu _s ] [ ++||--ww ] [ --xx _[_f_l_] ] [ --zz _[_z_] ] [ --ZZ _[_Z_] ] [
       ---- ] [_n_a_m_e_s]

DDEESSCCRRIIPPTTIIOONN
       _L_s_o_f revision 4.89 lists on its standard output file information about files opened by processes for the fol‐
       lowing UNIX dialects:

            Apple Darwin 9 and Mac OS X 10.[567]
            FreeBSD 8.[234], 9.0, 10.0 and 11.0 for AMD64-based systems
            Linux 2.1.72 and above for x86-based systems
            Solaris 9, 10 and 11

       (See the DDIISSTTRRIIBBUUTTIIOONN section of this manual page for information on how to obtain the latest _l_s_o_f revision.)

       An open file may be a regular file, a directory, a block special file, a character special file, an executing
       text reference, a library, a stream or a network file (Internet socket, NFS file or UNIX domain  socket.)   A
       specific file or all the files in a file system may be selected by path.

       Instead  of  a formatted display, _l_s_o_f will produce output that can be parsed by other programs.  See the --FF,
       option description, and the OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS section for more information.

       In addition to producing a single output list, _l_s_o_f will run in repeat mode.  In repeat mode it will  produce
       output, delay, then repeat the output operation until stopped with an interrupt or quit signal.  See the ++||--rr
       _[_t_[_m_<_f_m_t_>_]_] option description for more information.

OOPPTTIIOONNSS
       In the absence of any options, _l_s_o_f lists all open files belonging to all active processes.

       If any list request option is specified, other list requests must be specifically requested - e.g., if --UU  is
       specified  for the listing of UNIX socket files, NFS files won't be listed unless --NN is also specified; or if
       a user list is specified with the --uu option, UNIX domain socket files, belonging to users not  in  the  list,
       won't be listed unless the --UU option is also specified.

       Normally  list  options  that  are  specifically  stated are ORed - i.e., specifying the --ii option without an
       address and the --uufoo option produces a listing of all network files OR files belonging to processes owned by
       user ``foo''.  The exceptions are:

       1) the `^' (negated) login name or user ID (UID), specified with the --uu option;

       2) the `^' (negated) process ID (PID), specified with the --pp option;

       3) the `^' (negated) process group ID (PGID), specified with the --gg option;

       4) the `^' (negated) command, specified with the --cc option;

       5) the (`^') negated TCP or UDP protocol state names, specified with the --ss _[_p_:_s_] option.

       Since  they  represent  exclusions, they are applied without ORing or ANDing and take effect before any other
       selection criteria are applied.

       The --aa option may be used to AND the selections.  For example, specifying --aa, --UU, and --uufoo produces a  list‐
       ing of only UNIX socket files that belong to processes owned by user ``foo''.

       Caution:  the  --aa  option  causes all list selection options to be ANDed; it can't be used to cause ANDing of
       selected pairs of selection options by placing it between them, even though its placement  there  is  accept‐
       able.  Wherever --aa is placed, it causes the ANDing of all selection options.

       Items  of  the  same selection set - command names, file descriptors, network addresses, process identifiers,
       user identifiers, zone names, security contexts - are joined in a single ORed  set  and  applied  before  the
       result  participates in ANDing.  Thus, for example, specifying --ii@aaa.bbb, --ii@ccc.ddd, --aa, and --uufff,ggg will
       select the listing of files that belong to either login ``fff'' OR ``ggg'' AND have  network  connections  to
       either host aaa.bbb OR ccc.ddd.

       Options  may be grouped together following a single prefix -- e.g., the option set ``--aa --bb --CC'' may be stated
       as --aabbCC.  However, since values are optional following ++||--ff, --FF, --gg, --ii, ++||--LL, --oo, ++||--rr, --ss, --SS, --TT,  --xx  and
       --zz.   when you have no values for them be careful that the following character isn't ambiguous.  For example,
       --FFnn might represent the --FF and --nn options, or it might represent the nn field identifier  character  following
       the  --FF  option.   When ambiguity is possible, start a new option with a `-' character - e.g., ``--FF --nn''.  If
       the next option is a file name, follow the possibly ambiguous option with ``--'' - e.g., ``--FF ---- _n_a_m_e''.

       Either the `+' or the `-' prefix may be applied to a group of options.  Options that don't take  on  separate
       meanings  for  each prefix - e.g., --ii - may be grouped under either prefix.  Thus, for example, ``+M -i'' may
       be stated as ``+Mi'' and the group means the same as the separate options.  Be  careful  of  prefix  grouping
       when  one  or more options in the group does take on separate meanings under different prefixes - e.g., ++||--MM;
       ``-iM'' is not the same request as ``-i +M''.  When in doubt, use separate options with appropriate prefixes.

       --?? --hh    These two equivalent options select a usage (help) output list.  _L_s_o_f displays a shortened  form  of
                this  output when it detects an error in the options supplied to it, after it has displayed messages
                explaining each error.  (Escape the `?' character as your shell requires.)

       --aa       causes list selection options to be ANDed, as described above.

       --AA _A     is available on systems configured for AFS whose AFS kernel code is implemented via dynamic modules.
                It  allows  the  _l_s_o_f user to specify _A as an alternate name list file where the kernel addresses of
                the dynamic modules might be found.  See the _l_s_o_f FAQ (The FFAAQQ section  gives  its  location.)   for
                more information about dynamic modules, their symbols, and how they affect _l_s_o_f.

       --bb       causes _l_s_o_f to avoid kernel functions that might block - _l_s_t_a_t(2), _r_e_a_d_l_i_n_k(2), and _s_t_a_t(2).

                See  the  BBLLOOCCKKSS  AANNDD  TTIIMMEEOOUUTTSS  and  AAVVOOIIDDIINNGG  KKEERRNNEELL BBLLOOCCKKSS sections for information on using this
                option.

       --cc _c     selects the listing of files for processes executing the command that begins with the characters  of
                _c.  Multiple commands may be specified, using multiple --cc options.  They are joined in a single ORed
                set before participating in AND option selection.

                If _c begins with a `^', then the following characters specify a command name whose processes are  to
                be ignored (excluded.)

                If  _c  begins  and  ends with a slash ('/'), the characters between the slashes are interpreted as a
                regular expression.  Shell meta-characters in the regular expression must be quoted to prevent their
                interpretation by the shell.  The closing slash may be followed by these modifiers:

                     b    the regular expression is a basic one.
                     i    ignore the case of letters.
                     x    the regular expression is an extended one
                          (default).

                See  the  _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for more information on basic and extended
                regular expressions.

                The simple command specification is tested first.  If that test fails, the command  regular  expres‐
                sion  is  applied.   If  the simple command test succeeds, the command regular expression test isn't
                made.  This may result in ``no command found for regex:'' messages when lsof's --VV option  is  speci‐
                fied.

       ++cc _w     defines  the  maximum number of initial characters of the name, supplied by the UNIX dialect, of the
                UNIX command associated with a process to be printed in the COMMAND column.  (The  _l_s_o_f  default  is
                nine.)

                Note  that  many  UNIX  dialects  do not supply all command name characters to _l_s_o_f in the files and
                structures from which _l_s_o_f obtains command name.  Often dialects limit the number of characters sup‐
                plied  in  those sources.  For example, Linux 2.4.27 and Solaris 9 both limit command name length to
                16 characters.

                If _w is zero ('0'), all command characters supplied to _l_s_o_f by the UNIX dialect will be printed.

                If _w is less than the length of the column title, ``COMMAND'', it will be raised to that length.

       --CC       disables the reporting of any path name components from the kernel's name  cache.   See  the  KKEERRNNEELL
                NNAAMMEE CCAACCHHEE section for more information.

       ++dd _s     causes  _l_s_o_f  to  search for all open instances of directory _s and the files and directories it con‐
                tains at its top level.  ++dd does NOT descend the directory tree, rooted at _s.  The ++DD _D  option  may
                be used to request a full-descent directory tree search, rooted at directory _D.

                Processing of the ++dd option does not follow symbolic links within _s unless the --xx or --xx  ll option is
                also specified.  Nor does it search for open files on file system mount points on subdirectories  of
                _s unless the --xx or --xx  ff option is also specified.

                Note:  the  authority  of the user of this option limits it to searching for files that the user has
                permission to examine with the system _s_t_a_t(2) function.

       --dd _s     specifies a list of file descriptors (FDs) to exclude from or include in the  output  listing.   The
                file  descriptors are specified in the comma-separated set _s - e.g., ``cwd,1,3'', ``^6,^2''.  (There
                should be no spaces in the set.)

                The list is an exclusion list if all entries of the set begin with `^'.  It is an inclusion list  if
                no entry begins with `^'.  Mixed lists are not permitted.

                A  file  descriptor  number range may be in the set as long as neither member is empty, both members
                are numbers, and the ending member is larger than the starting one  -  e.g.,  ``0-7''  or  ``3-10''.
                Ranges may be specified for exclusion if they have the `^' prefix - e.g., ``^0-7'' excludes all file
                descriptors 0 through 7.

                Multiple file descriptor numbers are joined in a single ORed set before participating in AND  option
                selection.

                When  there  are  exclusion  and inclusion members in the set, _l_s_o_f reports them as errors and exits
                with a non-zero return code.

                See the description of File Descriptor (FD) output values in the OOUUTTPPUUTT section for more information
                on file descriptor names.

       ++DD _D     causes  _l_s_o_f  to  search  for all open instances of directory _D and all the files and directories it
                contains to its complete depth.

                Processing of the ++DD option does not follow symbolic links within _D unless the --xx or --xx  ll option is
                also  specified.  Nor does it search for open files on file system mount points on subdirectories of
                _D unless the --xx or --xx  ff option is also specified.

                Note: the authority of the user of this option limits it to searching for files that  the  user  has
                permission to examine with the system _s_t_a_t(2) function.

                Further note: _l_s_o_f may process this option slowly and require a large amount of dynamic memory to do
                it.  This is because it must descend the entire directory tree, rooted at  _D,  calling  _s_t_a_t(2)  for
                each  file  and  directory, building a list of all the files it finds, and searching that list for a
                match with every open file.  When directory _D is large, these steps can take a  long  time,  so  use
                this option prudently.

       --DD _D     directs  _l_s_o_f_'_s  use of the device cache file.  The use of this option is sometimes restricted.  See
                the DDEEVVIICCEE CCAACCHHEE FFIILLEE section and the sections that follow it for more information on this option.

                --DD must be followed by a function letter; the function letter may optionally be followed by  a  path
                name.  _L_s_o_f recognizes these function letters:

                     ?? - report device cache file paths
                     bb - build the device cache file
                     ii - ignore the device cache file
                     rr - read the device cache file
                     uu - read and update the device cache file

                The  bb,  rr, and uu functions, accompanied by a path name, are sometimes restricted.  When these func‐
                tions are restricted, they will not appear in the description of the --DD option that  accompanies  --hh
                or  --??   option  output.  See the DDEEVVIICCEE CCAACCHHEE FFIILLEE section and the sections that follow it for more
                information on these functions and when they're restricted.

                The ??  function reports the read-only and write paths that lsof can use for the device  cache  file,
                the  names of any environment variables whose values _l_s_o_f will examine when forming the device cache
                file path, and the format for the personal device cache file path.  (Escape  the  `?'  character  as
                your shell requires.)

                When  available,  the  bb,  rr,  and uu functions may be followed by the device cache file's path.  The
                standard default is _._l_s_o_f___h_o_s_t_n_a_m_e in the home directory of the real user ID that executes _l_s_o_f, but
                this  could  have  been changed when _l_s_o_f was configured and compiled.  (The output of the --hh and --??
                options show the current default prefix - e.g., ``.lsof''.)  The suffix, _h_o_s_t_n_a_m_e, is the first com‐
                ponent of the host's name returned by _g_e_t_h_o_s_t_n_a_m_e(2).

                When available, the bb function directs _l_s_o_f to build a new device cache file at the default or spec‐
                ified path.

                The ii function directs _l_s_o_f to ignore the default device cache file and obtain its information about
                devices via direct calls to the kernel.

                The  rr function directs _l_s_o_f to read the device cache at the default or specified path, but prevents
                it from creating a new device cache file when none exists or the existing one is  improperly  struc‐
                tured.  The rr function, when specified without a path name, prevents _l_s_o_f from updating an incorrect
                or outdated device cache file, or creating a new one in its place.  The rr function is always  avail‐
                able  when  it is specified without a path name argument; it may be restricted by the permissions of
                the _l_s_o_f process.

                When available, the uu function directs _l_s_o_f to read the device cache file at the default  or  speci‐
                fied  path,  if  possible,  and  to rebuild it, if necessary.  This is the default device cache file
                function when no --DD option has been specified.

       ++||--ee _s   exempts the file system whose path name is _s from being subjected  to  kernel  function  calls  that
                might  block.   The  ++ee option exempts _s_t_a_t(2), _l_s_t_a_t(2) and most _r_e_a_d_l_i_n_k(2) kernel function calls.
                The --ee option exempts only _s_t_a_t_(_2_) and _l_s_t_a_t(2) kernel function calls.  Multiple file systems may be
                specified with separate ++||--ee specifications and each may have _r_e_a_d_l_i_n_k(2) calls exempted or not.

                This option is currently implemented only for Linux.

                CCAAUUTTIIOONN:: this option can easily be mis-applied to other than the file system of interest, because it
                uses path name rather than the more reliable device and inode numbers.  (Device  and  inode  numbers
                are  acquired  via  the potentially blocking _s_t_a_t(2) kernel call and are thus not available, but see
                the ++||--mm _m option as a possible alternative way to supply device numbers.)   UUssee  tthhiiss  ooppttiioonn  wwiitthh
                ggrreeaatt ccaarree aanndd ffuullllyy ssppeecciiffyy tthhee ppaatthh nnaammee ooff tthhee ffiillee ssyysstteemm ttoo bbee eexxeemmpptteedd..

                When  open  files  on exempted file systems are reported, it may not be possible to obtain all their
                information.  Therefore, some information columns will be blank, the characters ``UNKN'' preface the
                values in the TYPE column, and the applicable exemption option is added in parentheses to the end of
                the NAME column.  (Some device number information might be made available via the ++||--mm _m option.)

       ++||--EE     ++EE specifies that Linux pipe and Linux UNIX socket files should be displayed with endpoint  informa‐
                tion  and  the  files  of  the  endpoints should also be displayed.  Note: UNIX socket file endpoint
                information is available only when the compile flags line of --vv output contains HASUXSOCKEPT.

                Pipe endpoint information is displayed in the NAME column in the form ``_P_I_D_,_c_m_d_,_F_D_m_o_d_e'', where  _P_I_D
                is  the endpoint process ID; _c_m_d is the endpoint process command; _F_D is the endpoint file's descrip‐
                tor; and _m_o_d_e is the endpoint file's access mode.

                UNIX socket file endpoint information is displayed in the NAME column in the form
                ``type=_T_Y_P_E ->INO=_I_N_O_D_E _P_I_D_,_c_m_d_,_F_D_m_o_d_e'', where _T_Y_P_E is the socket type; _I_N_O_D_E is the i-node  number
                of  the connected socket; and _P_I_D_, _c_m_d_, _F_D_, and _m_o_d_e are the same as with pipe endpoint information.
                Note: UNIX socket file endpoint information is available only when the compile flags line of --vv out‐
                put contains HASUXSOCKEPT.

                Multiple occurrences of this information can appear in a file's NAME column.

                --EE  specfies  that Linux pipe and Linux UNIX socket files should be displayed with endpoint informa‐
                tion, but not the files of the endpoints.

       ++||--ff [[ccffggGGnn]]
                ff by itself clarifies how path name arguments are to be interpreted.  When followed by cc, ff,  gg,  GG,
                or  nn in any combination it specifies that the listing of kernel file structure information is to be
                enabled (`+') or inhibited (`-').

                Normally a path name argument is taken to be a file system name if it matches a mounted-on directory
                name reported by _m_o_u_n_t(8), or if it represents a block device, named in the _m_o_u_n_t output and associ‐
                ated with a mounted directory name.  When ++ff is specified, all path name arguments will be taken  to
                be  file system names, and _l_s_o_f will complain if any are not.  This can be useful, for example, when
                the file system name (mounted-on device) isn't a block device.  This happens for  some  CD-ROM  file
                systems.

                When --ff is specified by itself, all path name arguments will be taken to be simple files.  Thus, for
                example, the ``--ff -- /'' arguments direct lsof to search for open files with a `/'  path  name,  not
                all open files in the `/' (root) file system.

                Be  careful to make sure ++ff and --ff are properly terminated and aren't followed by a character (e.g.,
                of the file or file system name) that might be taken as a parameter.  For example, use ``--''  after
                ++ff and --ff as in these examples.

                     $ lsof +f -- /file/system/name
                     $ lsof -f -- /file/name

                The  listing  of information from kernel file structures, requested with the ++ff [[ccffggGGnn]] option form,
                is normally inhibited, and is not available in whole or part for some dialects -  e.g.,  /proc-based
                Linux  kernels  below  2.6.22.   When the prefix to ff is a plus sign (`+'), these characters request
                file structure information:

                     cc    file structure use count (not Linux)
                     ff    file structure address (not Linux)
                     gg    file flag abbreviations (Linux 2.6.22 and up)
                     GG    file flags in hexadecimal (Linux 2.6.22 and up)
                     nn    file structure node address (not Linux)

                When the prefix is minus (`-') the same characters disable the listing of the indicated values.

                File structure addresses, use counts, flags, and node addresses may be used to detect  more  readily
                identical  files  inherited  by  child  processes and identical files in use by different processes.
                _L_s_o_f column output can be sorted by output columns holding the values and listed to identify identi‐
                cal  file  use,  or  _l_s_o_f field output can be parsed by an AWK or Perl post-filter script, or by a C
                program.

       --FF _f     specifies a character list, _f, that selects the fields to be output for processing by  another  pro‐
                gram,  and  the  character  that terminates each output field.  Each field to be output is specified
                with a single character in _f.  The field terminator defaults to NL, but may be changed to NUL (000).
                See  the  OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS section for a description of the field identification characters
                and the field output process.

                When the field selection character list is empty, all standard fields are selected (except  the  raw
                device field, security context and zone field for compatibility reasons) and the NL field terminator
                is used.

                When the field selection character list contains only a zero (`0'), all fields are selected  (except
                the raw device field for compatibility reasons) and the NUL terminator character is used.

                Other  combinations  of  fields  and  their  associated  field terminator character must be set with
                explicit entries in _f, as described in the OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS section.

                When a field selection character identifies an item _l_s_o_f  does  not  normally  list  -  e.g.,  PPID,
                selected  with  --RR - specification of the field character - e.g., ``--FFRR'' - also selects the listing
                of the item.

                When the field selection character list contains the single character `?', _l_s_o_f will display a  help
                list of the field identification characters.  (Escape the `?' character as your shell requires.)

       --gg _[_s_]   excludes  or selects the listing of files for the processes whose optional process group IDentifica‐
                tion (PGID) numbers are in the comma-separated set _s - e.g., ``123'' or ``123,^456''.  (There should
                be no spaces in the set.)

                PGID numbers that begin with `^' (negation) represent exclusions.

                Multiple  PGID numbers are joined in a single ORed set before participating in AND option selection.
                However, PGID exclusions are applied without ORing or ANDing and take effect before other  selection
                criteria are applied.

                The  --gg  option  also enables the output display of PGID numbers.  When specified without a PGID set
                that's all it does.

       --ii _[_i_]   selects the listing of files any of whose Internet address matches the address specified in  _i.   If
                no  address  is  specified, this option selects the listing of all Internet and x.25 (HP-UX) network
                files.

                If --ii_4 or --ii_6 is specified with no following address, only files of the indicated IP  version,  IPv4
                or  IPv6,  are displayed.  (An IPv6 specification may be used only if the dialects supports IPv6, as
                indicated by ``[46]'' and ``IPv[46]'' in _l_s_o_f_'_s --hh or --??   output.)   Sequentially  specifying  --ii4,
                followed  by  --ii6  is the same as specifying --ii, and vice-versa.  Specifying --ii4, or --ii6 after --ii is
                the same as specifying --ii4 or --ii6 by itself.

                Multiple addresses (up to a limit of 100) may be specified with multiple --ii options.  (A port number
                or  service name range is counted as one address.)  They are joined in a single ORed set before par‐
                ticipating in AND option selection.

                An Internet address is specified in the form (Items in square brackets are optional.):

                [_4_6][_p_r_o_t_o_c_o_l][@_h_o_s_t_n_a_m_e|_h_o_s_t_a_d_d_r][:_s_e_r_v_i_c_e|_p_o_r_t]

                where:
                     _4_6 specifies the IP version, IPv4 or IPv6
                          that applies to the following address.
                          '6' may be be specified only if the UNIX
                          dialect supports IPv6.  If neither '4' nor
                          '6' is specified, the following address
                          applies to all IP versions.
                     _p_r_o_t_o_c_o_l is a protocol name - TTCCPP, UUDDPP
                     _h_o_s_t_n_a_m_e is an Internet host name.  Unless a
                          specific IP version is specified, open
                          network files associated with host names
                          of all versions will be selected.
                     _h_o_s_t_a_d_d_r is a numeric Internet IPv4 address in
                          dot form; or an IPv6 numeric address in
                          colon form, enclosed in brackets, if the
                          UNIX dialect supports IPv6.  When an IP
                          version is selected, only its numeric
                          addresses may be specified.
                     _s_e_r_v_i_c_e is an _/_e_t_c_/_s_e_r_v_i_c_e_s name - e.g., ssmmttpp -
                          or a list of them.
                     _p_o_r_t is a port number, or a list of them.

                IPv6 options may be used only if the UNIX dialect supports IPv6.  To see  if  the  dialect  supports
                IPv6,  run  _l_s_o_f  and  specify  the --hh or --??  (help) option.  If the displayed description of the --ii
                option contains ``[46]'' and ``IPv[46]'', IPv6 is supported.

                IPv4 host names and addresses may not be specified if network file selection is limited to IPv6 with
                --ii  6.   IPv6  host names and addresses may not be specified if network file selection is limited to
                IPv4 with --ii 4.  When an open IPv4 network file's address is mapped in an  IPv6  address,  the  open
                file's type will be IPv6, not IPv4, and its display will be selected by '6', not '4'.

                At  least one address component - 44,, 66,, _p_r_o_t_o_c_o_l, _h_o_s_t_n_a_m_e, _h_o_s_t_a_d_d_r, or _s_e_r_v_i_c_e - must be supplied.
                The `@' character, leading the host specification, is always required; as is the  `:',  leading  the
                port  specification.  Specify either _h_o_s_t_n_a_m_e or _h_o_s_t_a_d_d_r.  Specify either _s_e_r_v_i_c_e name list or _p_o_r_t
                number list.  If a _s_e_r_v_i_c_e name list is specified, the _p_r_o_t_o_c_o_l may also need to be specified if the
                TCP, UDP and UDPLITE port numbers for the service name are different.  Use any case - lower or upper
                - for _p_r_o_t_o_c_o_l.

                _S_e_r_v_i_c_e names and _p_o_r_t numbers may be combined in a list whose entries are separated by  commas  and
                whose  numeric range entries are separated by minus signs.  There may be no embedded spaces, and all
                service names must belong to the specified _p_r_o_t_o_c_o_l.  Since service names may contain embedded minus
                signs, the starting entry of a range can't be a service name; it can be a port number, however.

                Here are some sample addresses:

                     -i6 - IPv6 only
                     TCP:25 - TCP and port 25
                     @1.2.3.4 - Internet IPv4 host address 1.2.3.4
                     @[3ffe:1ebc::1]:1234 - Internet IPv6 host address
                          3ffe:1ebc::1, port 1234
                     UDP:who - UDP who service port
                     TCP@lsof.itap:513 - TCP, port 513 and host name lsof.itap
                     tcp@foo:1-10,smtp,99 - TCP, ports 1 through 10,
                          service name _s_m_t_p, port 99, host name foo
                     tcp@bar:1-smtp - TCP, ports 1 through _s_m_t_p, host bar
                     :time - either TCP, UDP or UDPLITE time service port

       --KK       selects  the  listing  of tasks (threads) of processes, on dialects where task (thread) reporting is
                supported.  (If help output - i.e., the output of the --hh or --??  options - shows  this  option,  then
                task (thread) reporting is supported by the dialect.)

                When  --KK  and  --aa are both specified on Linux, and the tasks of a main process are selected by other
                options, the main process will also be listed as though it were a task, but without a task ID.  (See
                the description of the TID column in the OOUUTTPPUUTT section.)

                Where the FreeBSD version supports threads, all threads will be listed with their IDs.

                In general threads and tasks inherit the files of the caller, but may close some and open others, so
                _l_s_o_f always reports all the open files of threads and tasks.

       --kk _k     specifies a kernel name list file, _k, in place of /vmunix, /mach, etc.  --kk is  not  available  under
                AIX on the IBM RISC/System 6000.

       --ll       inhibits the conversion of user ID numbers to login names.  It is also useful when login name lookup
                is working improperly or slowly.

       ++||--LL _[_l_] enables (`+') or disables (`-') the listing of file link counts, where they are  available  -  e.g.,
                they aren't available for sockets, or most FIFOs and pipes.

                When  ++LL is specified without a following number, all link counts will be listed.  When --LL is speci‐
                fied (the default), no link counts will be listed.

                When ++LL is followed by a number, only files having a link  count  less  than  that  number  will  be
                listed.  (No number may follow --LL.)  A specification of the form ``++LL11'' will select open files that
                have been unlinked.  A specification of the form ``++aaLL11 _<_f_i_l_e___s_y_s_t_e_m_>'' will  select  unlinked  open
                files on the specified file system.

                For other link count comparisons, use field output (--FF) and a post-processing script or program.

       ++||--mm _m   specifies an alternate kernel memory file or activates mount table supplement processing.

                The  option form --mm _m specifies a kernel memory file, _m, in place of _/_d_e_v_/_k_m_e_m or _/_d_e_v_/_m_e_m - e.g., a
                crash dump file.

                The option form ++mm requests that a mount supplement file be written to  the  standard  output  file.
                All other options are silently ignored.

                There  will  be  a  line  in  the mount supplement file for each mounted file system, containing the
                mounted file system directory, followed by a single space, followed by the device number in hexadec‐
                imal "0x" format - e.g.,

                     / 0x801

                _L_s_o_f can use the mount supplement file to get device numbers for file systems when it can't get them
                via _s_t_a_t(2) or _l_s_t_a_t(2).

                The option form ++mm _m identifies _m as a mount supplement file.

                Note: the ++mm and ++mm _m options are not available for all supported dialects.   Check  the  output  of
                _l_s_o_f_'_s --hh or --??  options to see if the ++mm and ++mm _m options are available.

       ++||--MM     Enables (++) or disables (--) the reporting of portmapper registrations for local TCP, UDP and UDPLITE
                ports, where port mapping is supported.  (See the last paragraph  of  this  option  description  for
                information about where portmapper registration reporting is supported.)

                The  default  reporting  mode  is  set  by  the  _l_s_o_f builder with the HASPMAPENABLED #define in the
                dialect's machine.h header file; _l_s_o_f is distributed with the HASPMAPENABLED #define deactivated, so
                portmapper  reporting is disabled by default and must be requested with ++MM.  Specifying _l_s_o_f_'_s --hh or
                --??  option will report the default mode.  Disabling portmapper registration when it is already  dis‐
                abled  or enabling it when already enabled is acceptable.  When portmapper registration reporting is
                enabled, _l_s_o_f displays the portmapper registration (if any) for local TCP, UDP or UDPLITE  ports  in
                square  brackets  immediately following the port numbers or service names - e.g., ``:1234[name]'' or
                ``:name[100083]''.  The registration information may be a name or number, depending on what the reg‐
                istering program supplied to the portmapper when it registered the port.

                When  portmapper registration reporting is enabled, _l_s_o_f may run a little more slowly or even become
                blocked when access to the portmapper becomes congested or stopped.  Reverse the reporting  mode  to
                determine if portmapper registration reporting is slowing or blocking _l_s_o_f.

                For  purposes  of  portmapper registration reporting _l_s_o_f considers a TCP, UDP or UDPLITE port local
                if: it is found in the local part of its containing kernel structure; or if it  is  located  in  the
                foreign part of its containing kernel structure and the local and foreign Internet addresses are the
                same; or if it is located in the foreign part of its containing kernel  structure  and  the  foreign
                Internet  address is INADDR_LOOPBACK (127.0.0.1).  This rule may make _l_s_o_f ignore some foreign ports
                on machines with multiple interfaces when the foreign Internet address is on a  different  interface
                from the local one.

                See  the _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for further discussion of portmapper regis‐
                tration reporting issues.

                Portmapper registration reporting is supported only on dialects that have RPC header  files.   (Some
                Linux  distributions  with  GlibC 2.14 do not have them.)  When portmapper registration reporting is
                supported, the --hh or --??  help output will show the ++||--MM option.

       --nn       inhibits the conversion of network numbers to host names for network files.   Inhibiting  conversion
                may make _l_s_o_f run faster.  It is also useful when host name lookup is not working properly.

       --NN       selects the listing of NFS files.

       --oo       directs  _l_s_o_f to display file offset at all times.  It causes the SIZE/OFF output column title to be
                changed to OFFSET.  Note: on some UNIX dialects _l_s_o_f can't obtain accurate or consistent file offset
                information from its kernel data sources, sometimes just for particular kinds of files (e.g., socket
                files.)  Consult the _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for more information.

                The --oo and --ss options are mutually exclusive; they can't both be specified.  When neither is  speci‐
                fied,  _l_s_o_f  displays whatever value - size or offset - is appropriate and available for the type of
                the file.

       --oo _o     defines the number of decimal digits (_o) to be printed after the ``0t'' for a file offset before the
                form  is  switched to ``0x...''.  An _o value of zero (unlimited) directs _l_s_o_f to use the ``0t'' form
                for all offset output.

                This option does NOT direct _l_s_o_f to display offset at all times; specify --oo (without a trailing num‐
                ber)  to  do  that.   --oo _o only specifies the number of digits after ``0t'' in either mixed size and
                offset or offset-only output.  Thus, for example, to direct _l_s_o_f to display offset at all times with
                a decimal digit count of 10, use:

                     -o -o 10
                or
                     -oo10

                The  default  number  of digits allowed after ``0t'' is normally 8, but may have been changed by the
                lsof builder.  Consult the description of the --oo _o option in the output of the --hh or --??   option  to
                determine the default that is in effect.

       --OO       directs _l_s_o_f to bypass the strategy it uses to avoid being blocked by some kernel operations - i.e.,
                doing them in forked child processes.  See the BBLLOOCCKKSS AANNDD TTIIMMEEOOUUTTSS and AAVVOOIIDDIINNGG KKEERRNNEELL  BBLLOOCCKKSS  sec‐
                tions for more information on kernel operations that may block _l_s_o_f.

                While  use of this option will reduce _l_s_o_f startup overhead, it may also cause _l_s_o_f to hang when the
                kernel doesn't respond to a function.  Use this option cautiously.

       --pp _s     excludes or selects the listing of files for the processes  whose  optional  process  IDentification
                (PID) numbers are in the comma-separated set _s - e.g., ``123'' or ``123,^456''.  (There should be no
                spaces in the set.)

                PID numbers that begin with `^' (negation) represent exclusions.

                Multiple process ID numbers are joined in a single ORed  set  before  participating  in  AND  option
                selection.  However, PID exclusions are applied without ORing or ANDing and take effect before other
                selection criteria are applied.

       --PP       inhibits the conversion of port numbers to port names for network files.  Inhibiting the  conversion
                may make _l_s_o_f run a little faster.  It is also useful when port name lookup is not working properly.

       ++||--rr _[_t_[_m_<_f_m_t_>_]_]
                puts  _l_s_o_f  in repeat mode.  There _l_s_o_f lists open files as selected by other options, delays _t sec‐
                onds (default fifteen), then repeats the listing, delaying and listing repetitively until stopped by
                a condition defined by the prefix to the option.

                If  the  prefix is a `-', repeat mode is endless.  _L_s_o_f must be terminated with an interrupt or quit
                signal.

                If the prefix is `+', repeat mode will end the first cycle no open files are listed - and of  course
                when  _l_s_o_f  is stopped with an interrupt or quit signal.  When repeat mode ends because no files are
                listed, the process exit code will be zero if any open files were ever listed;  one,  if  none  were
                ever listed.

                _L_s_o_f  marks  the end of each listing: if field output is in progress (the --FF, option has been speci‐
                fied), the default marker is `m'; otherwise the default marker is ``========''.  The marker is  fol‐
                lowed by a NL character.

                The optional "m<fmt>" argument specifies a format for the marker line.  The <fmt> characters follow‐
                ing `m' are interpreted as a format specification to the _s_t_r_f_t_i_m_e(3) function, when both it and  the
                _l_o_c_a_l_t_i_m_e(3)  function are available in the dialect's C library.  Consult the _s_t_r_f_t_i_m_e(3) documenta‐
                tion for what may appear in its format specification.  Note that when field output is requested with
                the  --FF option, <fmt> cannot contain the NL format, ``%n''.  Note also that when <fmt> contains spa‐
                ces or other characters that affect the shell's interpretation of arguments, <fmt>  must  be  quoted
                appropriately.

                Repeat  mode  reduces  _l_s_o_f  startup overhead, so it is more efficient to use this mode than to call
                _l_s_o_f repetitively from a shell script, for example.

                To use repeat mode most efficiently, accompany ++||--rr  with  specification  of  other  _l_s_o_f  selection
                options,  so  the  amount of kernel memory access _l_s_o_f does will be kept to a minimum.  Options that
                filter at the process level - e.g., --cc, --gg, --pp, --uu - are the most efficient selectors.

                Repeat mode is useful when coupled with field output (see the --FF, option description) and  a  super‐
                vising _a_w_k or _P_e_r_l script, or a C program.

       --RR       directs lsof to list the Parent Process IDentification number in the PPID column.

       --ss _[_p_:_s_] ss  alone directs _l_s_o_f to display file size at all times.  It causes the SIZE/OFF output column title
                to be changed to SIZE.  If the file does not have a size, nothing is displayed.

                The optional --ss _p_:_s form is available only for selected dialects, and only when the --hh or  --??   help
                output lists it.

                When  the  optional  form  is available, the ss may be followed by a protocol name (_p), either TCP or
                UDP, a colon (`:') and a comma-separated protocol state name list, the option causes  open  TCP  and
                UDP  files  to be excluded if their state name(s) are in the list (_s) preceded by a `^'; or included
                if their name(s) are not preceded by a `^'.

                When an inclusion list is defined, only network files with state names in the list will  be  present
                in  the  _l_s_o_f  output.  Thus, specifying one state name means that only network files with that lone
                state name will be listed.

                Case is unimportant in the protocol or state names, but there may be no spaces and the  colon  (`:')
                separating the protocol name (_p) and the state name list (_s) is required.

                If  only  TCP  and  UDP files are to be listed, as controlled by the specified exclusions and inclu‐
                sions, the --ii option must be specified, too.  If only a single protocol's files are  to  be  listed,
                add its name as an argument to the --ii option.

                For example, to list only network files with TCP state LISTEN, use:

                     -iTCP -sTCP:LISTEN

                Or, for example, to list network files with all UDP states except Idle, use:

                     -iUDP -sUDP:Idle

                State  names  vary with UNIX dialects, so it's not possible to provide a complete list.  Some common
                TCP state names are: CLOSED, IDLE, BOUND,  LISTEN,  ESTABLISHED,  SYN_SENT,  SYN_RCDV,  ESTABLISHED,
                CLOSE_WAIT, FIN_WAIT1, CLOSING, LAST_ACK, FIN_WAIT_2, and TIME_WAIT.  Two common UDP state names are
                Unbound and Idle.

                See the _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for more information on how to use  protocol
                state exclusion and inclusion, including examples.

                The  --oo  (without  a  following decimal digit count) and --ss option (without a following protocol and
                state name list) are mutually exclusive; they can't both be specified.  When neither  is  specified,
                _l_s_o_f displays whatever value - size or offset - is appropriate and available for the type of file.

                Since  some  types  of files don't have true sizes - sockets, FIFOs, pipes, etc. - lsof displays for
                their sizes the content amounts in their associated kernel buffers, if possible.

       --SS _[_t_]   specifies an optional time-out seconds value for  kernel  functions  -  _l_s_t_a_t(2),  _r_e_a_d_l_i_n_k(2),  and
                _s_t_a_t(2)  -  that  might otherwise deadlock.  The minimum for _t is two; the default, fifteen; when no
                value is specified, the default is used.

                See the BBLLOOCCKKSS AANNDD TTIIMMEEOOUUTTSS section for more information.

       --TT _[_t_]   controls the reporting of some TCP/TPI information, also reported by _n_e_t_s_t_a_t(1), following the  net‐
                work  addresses.   In  normal output the information appears in parentheses, each item except TCP or
                TPI state name identified by a keyword, followed by `=', separated from others by a single space:

                     <TCP or TPI state name>
                     QR=<read queue length>
                     QS=<send queue length>
                     SO=<socket options and values>
                     SS=<socket states>
                     TF=<TCP flags and values>
                     WR=<window read length>
                     WW=<window write length>

                Not all values are reported for all UNIX dialects.  Items values (when available) are reported after
                the item name and '='.

                When  the  field  output  mode is in effect (See OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS.)  each item appears as a
                field with a `T' leading character.

                --TT with no following key characters disables TCP/TPI information reporting.

                --TT with following characters selects the reporting of specific TCP/TPI information:

                     ff    selects reporting of socket options,
                          states and values, and TCP flags and
                          values.
                     qq    selects queue length reporting.
                     ss    selects connection state reporting.
                     ww    selects window size reporting.

                Not all selections are enabled for some UNIX dialects.  State may be selected for all  dialects  and
                is  reported  by default.  The --hh or --??  help output for the --TT option will show what selections may
                be used with the UNIX dialect.

                When --TT is used to select information - i.e., it is followed by one or more selection  characters  -
                the  displaying  of  state  is  disabled by default, and it must be explicitly selected again in the
                characters following --TT.  (In effect, then, the default is equivalent  to  --TTss.)   For  example,  if
                queue lengths and state are desired, use --TTqqss.

                Socket options, socket states, some socket values, TCP flags and one TCP value may be reported (when
                available in the UNIX dialect) in the form of the names that commonly appear after  SO_,  so_,  SS_,
                TCP_   and  TF_  in  the  dialect's  header files - most often <sys/socket.h>, <sys/socketvar.h> and
                <netinet/tcp_var.h>.  Consult those header files for the meaning of the flags, options,  states  and
                values.

                ``SO=''  precedes socket options and values; ``SS='', socket states; and ``TF='', TCP flags and val‐
                ues.

                If a flag or option has a value, the value will follow an '=' and the name -- e.g., ``SO=LINGER=5'',
                ``SO=QLIM=5'', ``TF=MSS=512''.  The following seven values may be reported:

                     Name
                     Reported  Description (Common Symbol)

                     KEEPALIVE keep alive time (SO_KEEPALIVE)
                     LINGER    linger time (SO_LINGER)
                     MSS       maximum segment size (TCP_MAXSEG)
                     PQLEN          partial listen queue connections
                     QLEN      established listen queue connections
                     QLIM      established listen queue limit
                     RCVBUF    receive buffer length (SO_RCVBUF)
                     SNDBUF    send buffer length (SO_SNDBUF)

                Details  on what socket options and values, socket states, and TCP flags and values may be displayed
                for particular UNIX dialects may be found in the answer to the  ``Why  doesn't  lsof  report  socket
                options, socket states, and TCP flags and values for my dialect?'' and ``Why doesn't lsof report the
                partial listen queue connection count for my dialect?''  questions in the _l_s_o_f FAQ (The FFAAQQ  section
                gives its location.)

       --tt       specifies  that _l_s_o_f should produce terse output with process identifiers only and no header - e.g.,
                so that the output may be piped to _k_i_l_l(1).  --tt selects the --ww option.

       --uu _s     selects the listing of files for the user whose login names or user ID numbers are in the comma-sep‐
                arated set _s - e.g., ``abe'', or ``548,root''.  (There should be no spaces in the set.)

                Multiple  login names or user ID numbers are joined in a single ORed set before participating in AND
                option selection.

                If a login name or user ID is preceded by a `^', it becomes a negation - i.e.,  files  of  processes
                owned  by the login name or user ID will never be listed.  A negated login name or user ID selection
                is neither ANDed nor ORed with other selections; it is applied before all other selections and abso‐
                lutely excludes the listing of the files of the process.  For example, to direct _l_s_o_f to exclude the
                listing of files belonging to root processes, specify ``-u^root'' or ``-u^0''.

       --UU       selects the listing of UNIX domain socket files.

       --vv       selects the listing of _l_s_o_f version information, including: revision number; when  the  _l_s_o_f  binary
                was  constructed;  who  constructed the binary and where; the name of the compiler used to construct
                the _l_s_o_f _b_i_n_a_r_y_; the version number of the compiler when readily available; the compiler and  loader
                flags  used to construct the _l_s_o_f binary; and system information, typically the output of _u_n_a_m_e's --aa
                option.

       --VV       directs _l_s_o_f to indicate the items it was asked to list and failed to find  -  command  names,  file
                names, Internet addresses or files, login names, NFS files, PIDs, PGIDs, and UIDs.

                When other options are ANDed to search options, or compile-time options restrict the listing of some
                files, _l_s_o_f may not report that it failed to find a search item when an ANDed option or compile-time
                option prevents the listing of the open file containing the located search item.

                For  example,  ``lsof  -V  -iTCP@foobar -a -d 999'' may not report a failure to locate open files at
                ``TCP@foobar'' and may not list any, if none have a file descriptor number of 999.  A similar situa‐
                tion  arises when HASSECURITY and HASNOSOCKSECURITY are defined at compile time and they prevent the
                listing of open files.

       ++||--ww     Enables (++) or disables (--) the suppression of warning messages.

                The _l_s_o_f builder may choose to have warning messages disabled or enabled by  default.   The  default
                warning  message  state  is indicated in the output of the --hh or --??  option.  Disabling warning mes‐
                sages when they are already disabled or enabling them when already enabled is acceptable.

                The --tt option selects the --ww option.

       --xx _[_f_l_]  may accompany the ++dd and ++DD options to direct their processing to cross over symbolic  links  and|or
                file system mount points encountered when scanning the directory (++dd) or directory tree (++DD).

                If  --xx  is specified by itself without a following parameter, cross-over processing of both symbolic
                links and file system mount points is enabled.  Note that when --xx is specified without a  parameter,
                the next argument must begin with '-' or '+'.

                The optional 'f' parameter enables file system mount point cross-over processing; 'l', symbolic link
                cross-over processing.

                The --xx option may not be supplied without also supplying a ++dd or ++DD option.

       --XX       This is a dialect-specific option.

           AIX:
                This IBM AIX RISC/System 6000 option requests the reporting of executed text file and shared library
                references.

                WWAARRNNIINNGG::  because  this  option uses the kernel readx() function, its use on a busy AIX system might
                cause an application process to hang so completely that it can neither be  killed  nor  stopped.   I
                have  never  seen this happen or had a report of its happening, but I think there is a remote possi‐
                bility it could happen.

                By default use of readx() is disabled.  On AIX 5L and above _l_s_o_f may need setuid-root permission  to
                perform the actions this option requests.

                The  _l_s_o_f  builder may specify that the --XX option be restricted to processes whose real UID is root.
                If that has been done, the --XX option will not appear in the --hh or --??  help output  unless  the  real
                UID  of the _l_s_o_f process is root.  The default _l_s_o_f distribution allows any UID to specify --XX,, so by
                default it will appear in the help output.

                When AIX readx() use is disabled, _l_s_o_f may not be able to report information for all text and loader
                file  references,  but  it  may also avoid exacerbating an AIX kernel directory search kernel error,
                known as the Stale Segment ID bug.

                The readx() function, used by _l_s_o_f or any other program to access some sections  of  kernel  virtual
                memory,  can  trigger  the Stale Segment ID bug.  It can cause the kernel's dir_search() function to
                believe erroneously that part of an in-memory copy of a  file  system  directory  has  been  zeroed.
                Another  application  process, distinct from _l_s_o_f, asking the kernel to search the directory - e.g.,
                by using _o_p_e_n(2) - can cause dir_search() to loop forever, thus hanging the application process.

                Consult the _l_s_o_f FAQ (The FFAAQQ section gives its location.)  and the _0_0_R_E_A_D_M_E file of the  _l_s_o_f  dis‐
                tribution  for  a  more  complete description of the Stale Segment ID bug, its APAR, and methods for
                defining readx() use when compiling _l_s_o_f.

           Linux:
                This Linux option requests that _l_s_o_f skip the reporting of information on  all  open  TCP,  UDP  and
                UDPLITE IPv4 and IPv6 files.

                This  Linux option is most useful when the system has an extremely large number of open TCP, UDP and
                UDPLITE files, the processing of whose information in the _/_p_r_o_c_/_n_e_t_/_t_c_p_*  and  _/_p_r_o_c_/_n_e_t_/_u_d_p_*  files
                would take _l_s_o_f a long time, and whose reporting is not of interest.

                Use  this  option with care and only when you are sure that the information you want _l_s_o_f to display
                isn't associated with open TCP, UDP or UDPLITE socket files.

           Solaris 10 and above:
                This Solaris 10 and above option requests the reporting of cached paths for  files  that  have  been
                deleted - i.e., removed with _r_m(1) or _u_n_l_i_n_k(2).

                The cached path is followed by the string `` (deleted)'' to indicate that the path by which the file
                was opened has been deleted.

                Because intervening changes made to the path - i.e., renames with  _m_v(1)  or  _r_e_n_a_m_e(2)  -  are  not
                recorded  in  the  cached path, what _l_s_o_f reports is only the path by which the file was opened, not
                its possibly different final path.

       --zz _[_z_]   specifies how Solaris 10 and higher zone information is to be handled.

                Without a following argument - e.g., NO _z - the option specifies that zone names are to be listed in
                the ZONE output column.

                The  --zz option may be followed by a zone name, zz_.  That causes lsof to list only open files for pro‐
                cesses in that zone.  Multiple --zz _z option and argument pairs may be specified to  form  a  list  of
                named zones.  Any open file of any process in any of the zones will be listed, subject to other con‐
                ditions specified by other options and arguments.

       --ZZ _[_Z_]   specifies how SELinux security contexts are to be handled.  It and 'Z' field output  character  sup‐
                port  are inhibited when SELinux is disabled in the running Linux kernel.  See OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROO‐‐
                GGRRAAMMSS for more information on the 'Z' field output character.

                Without a following argument - e.g., NO _Z - the option specifies that security contexts  are  to  be
                listed in the SECURITY-CONTEXT output column.

                The --ZZ option may be followed by a wildcard security context name, ZZ_.  That causes lsof to list only
                open files for processes in that security context.  Multiple --ZZ _Z option and argument pairs  may  be
                specified  to form a list of security contexts.  Any open file of any process in any of the security
                contexts will be listed, subject to other conditions specified by other options and arguments.  Note
                that _Z can be A:B:C or *:B:C or A:B:* or *:*:C to match against the A:B:C context.

       ----       The double minus sign option is a marker that signals the end of the keyed options.  It may be used,
                for example, when the first file name begins with a minus sign.   It  may  also  be  used  when  the
                absence  of  a  value for the last keyed option must be signified by the presence of a minus sign in
                the following option and before the start of the file names.

       _n_a_m_e_s    These are path names of specific files to list.  Symbolic links are resolved before use.  The  first
                name may be separated from the preceding options with the ``--'' option.

                If  a  _n_a_m_e is the mounted-on directory of a file system or the device of the file system, _l_s_o_f will
                list all the files open on the file system.  To be considered a file system, the _n_a_m_e must  match  a
                mounted-on  directory name in _m_o_u_n_t(8) output, or match the name of a block device associated with a
                mounted-on directory name.  The ++||--ff option may be used to force _l_s_o_f to consider a _n_a_m_e a file sys‐
                tem identifier (++ff) or a simple file (--ff).

                If  _n_a_m_e  is a path to a directory that is not the mounted-on directory name of a file system, it is
                treated just as a regular file is treated - i.e., its listing is restricted to processes  that  have
                it open as a file or as a process-specific directory, such as the root or current working directory.
                To request that _l_s_o_f look for open files inside a directory name, use the ++dd _s and ++DD _D options.

                If a _n_a_m_e is the base name of a family of multiplexed files - e.g, AIX's  _/_d_e_v_/_p_t_[_c_s_]  -  _l_s_o_f  will
                list  all  the  associated  multiplexed  files  on  the  device that are open - e.g., _/_d_e_v_/_p_t_[_c_s_]_/_1,
                _/_d_e_v_/_p_t_[_c_s_]_/_2, etc.

                If a _n_a_m_e is a UNIX domain socket name, _l_s_o_f will usually search for it by  the  characters  of  the
                name  alone  -  exactly as it is specified and is recorded in the kernel socket structure.  (See the
                next paragraph for an exception to that rule for Linux.)  Specifying a relative path - e.g.,  _._/_f_i_l_e
                -  in  place  of the file's absolute path - e.g., _/_t_m_p_/_f_i_l_e - won't work because _l_s_o_f must match the
                characters you specify with what it finds in the kernel UNIX domain socket structures.

                If a _n_a_m_e is a Linux UNIX domain socket name, in one case _l_s_o_f is able  to  search  for  it  by  its
                device  and  inode number, allowing _n_a_m_e to be a relative path.  The case requires that the absolute
                path -- i.e., one beginning with a slash ('/') be used by the process that created the  socket,  and
                hence  be  stored in the _/_p_r_o_c_/_n_e_t_/_u_n_i_x file; and it requires that _l_s_o_f be able to obtain the device
                and node numbers of both the absolute path in _/_p_r_o_c_/_n_e_t_/_u_n_i_x and _n_a_m_e via successful _s_t_a_t(2)  system
                calls.   When  those conditions are met, _l_s_o_f will be able to search for the UNIX domain socket when
                some path to it is is specified in _n_a_m_e.  Thus, for example, if the path is _/_d_e_v_/_l_o_g,  and  an  _l_s_o_f
                search is initiated when the working directory is _/_d_e_v, then _n_a_m_e could be _._/_l_o_g.

                If  a  _n_a_m_e is none of the above, _l_s_o_f will list any open files whose device and inode match that of
                the specified path _n_a_m_e.

                If you have also specified the --bb option, the only _n_a_m_e_s you may safely specify are file systems for
                which your mount table supplies alternate device numbers.  See the AAVVOOIIDDIINNGG KKEERRNNEELL BBLLOOCCKKSS and AALLTTEERR‐‐
                NNAATTEE DDEEVVIICCEE NNUUMMBBEERRSS sections for more information.

                Multiple file names are joined in a single ORed set before participating in AND option selection.

AAFFSS
       _L_s_o_f supports the recognition of AFS files for these dialects (and AFS versions):

            AIX 4.1.4 (AFS 3.4a)
            HP-UX 9.0.5 (AFS 3.4a)
            Linux 1.2.13 (AFS 3.3)
            Solaris 2.[56] (AFS 3.4a)

       It may recognize AFS files on other versions of these dialects, but has not been tested there.  Depending  on
       how  AFS is implemented, _l_s_o_f may recognize AFS files in other dialects, or may have difficulties recognizing
       AFS files in the supported dialects.

       _L_s_o_f may have trouble identifying all aspects of AFS files in supported dialects when AFS kernel  support  is
       implemented  via  dynamic  modules whose addresses do not appear in the kernel's variable name list.  In that
       case, _l_s_o_f may have to guess at the identity of AFS files, and might not be able to obtain volume information
       from  the kernel that is needed for calculating AFS volume node numbers.  When _l_s_o_f can't compute volume node
       numbers, it reports blank in the NODE column.

       The --AA _A option is available in some dialect implementations of _l_s_o_f for specifying the name list file  where
       dynamic  module  kernel addresses may be found.  When this option is available, it will be listed in the _l_s_o_f
       help output, presented in response to the --hh or --??

       See the _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for more information  about  dynamic  modules,  their
       symbols, and how they affect _l_s_o_f options.

       Because AFS path lookups don't seem to participate in the kernel's name cache operations, _l_s_o_f can't identify
       path name components for AFS files.

SSEECCUURRIITTYY
       _L_s_o_f has three features that may cause security concerns.  First, its default compilation mode allows  anyone
       to list all open files with it.  Second, by default it creates a user-readable and user-writable device cache
       file in the home directory of the real user ID that executes _l_s_o_f.  (The list-all-open-files and device cache
       features  may  be  disabled  when _l_s_o_f is compiled.)  Third, its --kk and --mm options name alternate kernel name
       list or memory files.

       Restricting the listing of all open files is controlled by the compile-time HASSECURITY and HASNOSOCKSECURITY
       options.   When  HASSECURITY  is  defined,  _l_s_o_f  will  allow only the root user to list all open files.  The
       non-root user may list only open files of processes with the same user IDentification number as the real user
       ID number of the _l_s_o_f process (the one that its user logged on with).

       However,  if  HASSECURITY and HASNOSOCKSECURITY are both defined, anyone may list open socket files, provided
       they are selected with the --ii option.

       When HASSECURITY is not defined, anyone may list all open files.

       Help output, presented in response to the --hh or --??  option, gives the status  of  the  HASSECURITY  and  HAS‐
       NOSOCKSECURITY definitions.

       See  the SSeeccuurriittyy section of the _0_0_R_E_A_D_M_E file of the _l_s_o_f distribution for information on building _l_s_o_f with
       the HASSECURITY and HASNOSOCKSECURITY options enabled.

       Creation and use of a user-readable and user-writable device cache file is  controlled  by  the  compile-time
       HASDCACHE  option.   See the DDEEVVIICCEE CCAACCHHEE FFIILLEE section and the sections that follow it for details on how its
       path is formed.  For security considerations it is important to note that in the default  _l_s_o_f  distribution,
       if  the  real  user  ID under which _l_s_o_f is executed is root, the device cache file will be written in root's
       home directory - e.g., _/ or _/_r_o_o_t.  When HASDCACHE is not defined, _l_s_o_f does not write or attempt to  read  a
       device cache file.

       When  HASDCACHE  is defined, the _l_s_o_f help output, presented in response to the --hh, --DD??, or --??  options, will
       provide device cache file handling information.  When HASDCACHE is not defined, the --hh  or  --??   output  will
       have no --DD option description.

       Before  you decide to disable the device cache file feature - enabling it improves the performance of _l_s_o_f by
       reducing the startup overhead of examining all the nodes in _/_d_e_v (or _/_d_e_v_i_c_e_s) - read the discussion of it in
       the _0_0_D_C_A_C_H_E file of the _l_s_o_f distribution and the _l_s_o_f FAQ (The FFAAQQ section gives its location.)

       WHEN IN DOUBT, YOU CAN TEMPORARILY DISABLE THE USE OF THE DEVICE CACHE FILE WITH THE --DDii OPTION.

       When  _l_s_o_f  user  declares alternate kernel name list or memory files with the --kk and --mm options, _l_s_o_f checks
       the user's authority to read them with _a_c_c_e_s_s(2).  This is intended to prevent whatever special power  _l_s_o_f_'_s
       modes  might  confer  on  it from letting it read files not normally accessible via the authority of the real
       user ID.

OOUUTTPPUUTT
       This section describes the information _l_s_o_f lists for each open file.  See the OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS sec‐
       tion for additional information on output that can be processed by another program.

       _L_s_o_f  only  outputs  printable  (declared  so  by _i_s_p_r_i_n_t(3)) 8 bit characters.  Non-printable characters are
       printed in one of three forms: the C ``\[bfrnt]'' form; the control character `^'  form  (e.g.,  ``^@'');  or
       hexadecimal  leading  ``\x''  form (e.g., ``\xab'').  Space is non-printable in the COMMAND column (``\x20'')
       and printable elsewhere.

       For some dialects - if HASSETLOCALE is defined in the dialect's machine.h header file - _l_s_o_f will  print  the
       extended 8 bit characters of a language locale.  The _l_s_o_f process must be supplied a language locale environ‐
       ment variable (e.g., LANG) whose value represents a known language locale in which  the  extended  characters
       are  considered  printable by _i_s_p_r_i_n_t(3).  Otherwise _l_s_o_f considers the extended characters non-printable and
       prints them according to its rules for non-printable characters, stated above.  Consult your dialect's _s_e_t_l_o_‐
       _c_a_l_e(3)  man  page  for  the  names  of other environment variables that may be used in place of LANG - e.g.,
       LC_ALL, LC_CTYPE, etc.

       _L_s_o_f_'_s language locale support for a dialect also covers wide characters - e.g., UTF-8  -  when  HASSETLOCALE
       and  HASWIDECHAR  are defined in the dialect's machine.h header file, and when a suitable language locale has
       been defined in the appropriate environment variable for the _l_s_o_f process.   Wide  characters  are  printable
       under  those  conditions if _i_s_w_p_r_i_n_t(3) reports them to be.  If HASSETLOCALE, HASWIDECHAR and a suitable lan‐
       guage locale aren't defined, or if _i_s_w_p_r_i_n_t(3) reports wide characters that aren't printable, _l_s_o_f  considers
       the  wide  characters  non-printable and prints each of their 8 bits according to its rules for non-printable
       characters, stated above.

       Consult the answers to the "Language locale support" questions in the lsof FAQ (The  FFAAQQ  section  gives  its
       location.) for more information.

       _L_s_o_f dynamically sizes the output columns each time it runs, guaranteeing that each column is a minimum size.
       It also guarantees that each column is separated from its predecessor by at least one space.

       COMMAND    contains the first nine characters of the name of the UNIX command associated  with  the  process.
                  If  a non-zero _w value is specified to the ++cc _w option, the column contains the first _w characters
                  of the name of the UNIX command associated with the process up to the limit of characters supplied
                  to  _l_s_o_f  by  the UNIX dialect.  (See the description of the ++cc _w command or the _l_s_o_f FAQ for more
                  information.  The FFAAQQ section gives its location.)

                  If _w is less than the length of the column title, ``COMMAND'', it will be raised to that length.

                  If a zero _w value is specified to the ++cc _w option, the column contains all the characters  of  the
                  name of the UNIX command associated with the process.

                  All command name characters maintained by the kernel in its structures are displayed in field out‐
                  put when the command name descriptor (`c') is specified.  See the OOUUTTPPUUTT FFOORR OOTTHHEERR  CCOOMMMMAANNDDSS  sec‐
                  tion for information on selecting field output and the associated command name descriptor.

       PID        is the Process IDentification number of the process.

       TID        is the task (thread) IDentification number, if task (thread) reporting is supported by the dialect
                  and a task (thread) is being listed.  (If help output - i.e., the output of the --hh or --??   options
                  - shows this option, then task (thread) reporting is supported by the dialect.)

                  A blank TID column in Linux indicates a process - i.e., a non-task.

       ZONE       is the Solaris 10 and higher zone name.  This column must be selected with the --zz option.

       SECURITY-CONTEXT
                  is  the SELinux security context.  This column must be selected with the --ZZ option.  Note that the
                  --ZZ option is inhibited when SELinux is disabled in the running Linux kernel.

       PPID       is the Parent Process IDentification number of the process.  It is  only  displayed  when  the  --RR
                  option has been specified.

       PGID       is the process group IDentification number associated with the process.  It is only displayed when
                  the --gg option has been specified.

       USER       is the user ID number or login name of the user to whom the process belongs, usually the  same  as
                  reported  by _p_s(1).  However, on Linux USER is the user ID number or login that owns the directory
                  in /proc where _l_s_o_f finds information about the process.  Usually that is the same value  reported
                  by  _p_s(1),  but may differ when the process has changed its effective user ID.  (See the --ll option
                  description for information on when a user ID number or login name is displayed.)

       FD         is the File Descriptor number of the file or:

                       ccwwdd  current working directory;
                       LL_n_n  library references (AIX);
                       eerrrr  FD information error (see NAME column);
                       jjlldd  jail directory (FreeBSD);
                       llttxx  shared library text (code and data);
                       MMxxxx  hex memory-mapped type number xx.
                       mm8866  DOS Merge mapped file;
                       mmeemm  memory-mapped file;
                       mmmmaapp memory-mapped device;
                       ppdd   parent directory;
                       rrttdd  root directory;
                       ttrr   kernel trace file (OpenBSD);
                       ttxxtt  program text (code and data);
                       vv8866  VP/ix mapped file;

                  FD is followed by one of these characters, describing the mode under which the file is open:

                       rr for read access;
                       ww for write access;
                       uu for read and write access;
                       space if mode unknown and no lock
                            character follows;
                       `-' if mode unknown and lock
                            character follows.

                  The mode character is followed by one of these  lock  characters,  describing  the  type  of  lock
                  applied to the file:

                       NN for a Solaris NFS lock of unknown type;
                       rr for read lock on part of the file;
                       RR for a read lock on the entire file;
                       ww for a write lock on part of the file;
                       WW for a write lock on the entire file;
                       uu for a read and write lock of any length;
                       UU for a lock of unknown type;
                       xx for an SCO OpenServer Xenix lock on part      of the file;
                       XX for an SCO OpenServer Xenix lock on the entire file;
                       space if there is no lock.

                  See the LLOOCCKKSS section for more information on the lock information character.

                  The FD column contents constitutes a single field for parsing in post-processing scripts.

       TYPE       is the type of the node associated with the file - e.g., GDIR, GREG, VDIR, VREG, etc.

                  or ``IPv4'' for an IPv4 socket;

                  or  ``IPv6''  for  an  open  IPv6  network  file  - even if its address is IPv4, mapped in an IPv6
                  address;

                  or ``ax25'' for a Linux AX.25 socket;

                  or ``inet'' for an Internet domain socket;

                  or ``lla'' for a HP-UX link level access file;

                  or ``rte'' for an AF_ROUTE socket;

                  or ``sock'' for a socket of unknown domain;

                  or ``unix'' for a UNIX domain socket;

                  or ``x.25'' for an HP-UX x.25 socket;

                  or ``BLK'' for a block special file;

                  or ``CHR'' for a character special file;

                  or ``DEL'' for a Linux map file that has been deleted;

                  or ``DIR'' for a directory;

                  or ``DOOR'' for a VDOOR file;

                  or ``FIFO'' for a FIFO special file;

                  or ``KQUEUE'' for a BSD style kernel event queue file;

                  or ``LINK'' for a symbolic link file;

                  or ``MPB'' for a multiplexed block file;

                  or ``MPC'' for a multiplexed character file;

                  or ``NOFD'' for a Linux /proc/<PID>/fd directory that  can't  be  opened  --  the  directory  path
                  appears in the NAME column, followed by an error message;

                  or ``PAS'' for a _/_p_r_o_c_/_a_s file;

                  or ``PAXV'' for a _/_p_r_o_c_/_a_u_x_v file;

                  or ``PCRE'' for a _/_p_r_o_c_/_c_r_e_d file;

                  or ``PCTL'' for a _/_p_r_o_c control file;

                  or ``PCUR'' for the current _/_p_r_o_c process;

                  or ``PCWD'' for a _/_p_r_o_c current working directory;

                  or ``PDIR'' for a _/_p_r_o_c directory;

                  or ``PETY'' for a _/_p_r_o_c executable type (_e_t_y_p_e);

                  or ``PFD'' for a _/_p_r_o_c file descriptor;

                  or ``PFDR'' for a _/_p_r_o_c file descriptor directory;

                  or ``PFIL'' for an executable _/_p_r_o_c file;

                  or ``PFPR'' for a _/_p_r_o_c FP register set;

                  or ``PGD'' for a _/_p_r_o_c_/_p_a_g_e_d_a_t_a file;

                  or ``PGID'' for a _/_p_r_o_c group notifier file;

                  or ``PIPE'' for pipes;

                  or ``PLC'' for a _/_p_r_o_c_/_l_w_p_c_t_l file;

                  or ``PLDR'' for a _/_p_r_o_c_/_l_p_w directory;

                  or ``PLDT'' for a _/_p_r_o_c_/_l_d_t file;

                  or ``PLPI'' for a _/_p_r_o_c_/_l_p_s_i_n_f_o file;

                  or ``PLST'' for a _/_p_r_o_c_/_l_s_t_a_t_u_s file;

                  or ``PLU'' for a _/_p_r_o_c_/_l_u_s_a_g_e file;

                  or ``PLWG'' for a _/_p_r_o_c_/_g_w_i_n_d_o_w_s file;

                  or ``PLWI'' for a _/_p_r_o_c_/_l_w_p_s_i_n_f_o file;

                  or ``PLWS'' for a _/_p_r_o_c_/_l_w_p_s_t_a_t_u_s file;

                  or ``PLWU'' for a _/_p_r_o_c_/_l_w_p_u_s_a_g_e file;

                  or ``PLWX'' for a _/_p_r_o_c_/_x_r_e_g_s file;

                  or ``PMAP'' for a _/_p_r_o_c map file (_m_a_p);

                  or ``PMEM'' for a _/_p_r_o_c memory image file;

                  or ``PNTF'' for a _/_p_r_o_c process notifier file;

                  or ``POBJ'' for a _/_p_r_o_c_/_o_b_j_e_c_t file;

                  or ``PODR'' for a _/_p_r_o_c_/_o_b_j_e_c_t directory;

                  or ``POLP'' for an old format _/_p_r_o_c light weight process file;

                  or ``POPF'' for an old format _/_p_r_o_c PID file;

                  or ``POPG'' for an old format _/_p_r_o_c page data file;

                  or ``PORT'' for a SYSV named pipe;

                  or ``PREG'' for a _/_p_r_o_c register file;

                  or ``PRMP'' for a _/_p_r_o_c_/_r_m_a_p file;

                  or ``PRTD'' for a _/_p_r_o_c root directory;

                  or ``PSGA'' for a _/_p_r_o_c_/_s_i_g_a_c_t file;

                  or ``PSIN'' for a _/_p_r_o_c_/_p_s_i_n_f_o file;

                  or ``PSTA'' for a _/_p_r_o_c status file;

                  or ``PSXSEM'' for a POSIX semaphore file;

                  or ``PSXSHM'' for a POSIX shared memory file;

                  or ``PUSG'' for a _/_p_r_o_c_/_u_s_a_g_e file;

                  or ``PW'' for a _/_p_r_o_c_/_w_a_t_c_h file;

                  or ``PXMP'' for a _/_p_r_o_c_/_x_m_a_p file;

                  or ``REG'' for a regular file;

                  or ``SMT'' for a shared memory transport file;

                  or ``STSO'' for a stream socket;

                  or ``UNNM'' for an unnamed type file;

                  or ``XNAM'' for an OpenServer Xenix special file of unknown type;

                  or ``XSEM'' for an OpenServer Xenix semaphore file;

                  or ``XSD'' for an OpenServer Xenix shared data file;

                  or the four type number octets if the corresponding name isn't known.

       FILE-ADDR  contains the kernel file structure address when ff has been specified to ++ff;

       FCT        contains the file reference count from the kernel file structure when cc has been specified to ++ff;

       FILE-FLAG  when  gg or GG has been specified to ++ff, this field contains the contents of the f_flag[s] member of
                  the kernel file structure and the kernel's per-process open file flags (if available); `G'  causes
                  them  to  be  displayed  in hexadecimal; `g', as short-hand names; two lists may be displayed with
                  entries separated by commas, the lists separated by a semicolon (`;'); the first list may  contain
                  short-hand names for f_flag[s] values from the following table:

                       AIO       asynchronous I/O (e.g., FAIO)
                       AP        append
                       ASYN      asynchronous I/O (e.g., FASYNC)
                       BAS       block, test, and set in use
                       BKIU      block if in use
                       BL        use block offsets
                       BSK       block seek
                       CA        copy avoid
                       CIO       concurrent I/O
                       CLON      clone
                       CLRD      CL read
                       CR        create
                       DF        defer
                       DFI       defer IND
                       DFLU      data flush
                       DIR       direct
                       DLY       delay
                       DOCL      do clone
                       DSYN      data-only integrity
                       DTY       must be a directory
                       EVO       event only
                       EX        open for exec
                       EXCL      exclusive open
                       FSYN      synchronous writes
                       GCDF      defer during unp_gc() (AIX)
                       GCMK      mark during unp_gc() (AIX)
                       GTTY      accessed via /dev/tty
                       HUP       HUP in progress
                       KERN      kernel
                       KIOC      kernel-issued ioctl
                       LCK       has lock
                       LG        large file
                       MBLK      stream message block
                       MK        mark
                       MNT       mount
                       MSYN      multiplex synchronization
                       NATM      don't update atime
                       NB        non-blocking I/O
                       NBDR      no BDRM check
                       NBIO      SYSV non-blocking I/O
                       NBF       n-buffering in effect
                       NC        no cache
                       ND        no delay
                       NDSY      no data synchronization
                       NET       network
                       NFLK      don't follow links
                       NMFS      NM file system
                       NOTO      disable background stop
                       NSH       no share
                       NTTY      no controlling TTY
                       OLRM      OLR mirror
                       PAIO      POSIX asynchronous I/O
                       PP        POSIX pipe
                       R         read
                       RC        file and record locking cache
                       REV       revoked
                       RSH       shared read
                       RSYN      read synchronization
                       RW        read and write access
                       SL        shared lock
                       SNAP      cooked snapshot
                       SOCK      socket
                       SQSH      Sequent shared set on open
                       SQSV      Sequent SVM set on open
                       SQR       Sequent set repair on open
                       SQS1      Sequent full shared open
                       SQS2      Sequent partial shared open
                       STPI      stop I/O
                       SWR       synchronous read
                       SYN       file integrity while writing
                       TCPM      avoid TCP collision
                       TR        truncate
                       W         write
                       WKUP      parallel I/O synchronization
                       WTG       parallel I/O synchronization
                       VH        vhangup pending
                       VTXT      virtual text
                       XL        exclusive lock

                  this list of names was derived from F* #define's in dialect header files <fcntl.h>, <linux</fs.h>,
                  <sys/fcntl.c>, <sys/fcntlcom.h>, and <sys/file.h>; see the lsof.h header file for a  list  showing
                  the correspondence between the above short-hand names and the header file definitions;

                  the  second  list  (after  the semicolon) may contain short-hand names for kernel per-process open
                  file flags from this table:

                       ALLC      allocated
                       BR        the file has been read
                       BHUP      activity stopped by SIGHUP
                       BW        the file has been written
                       CLSG      closing
                       CX        close-on-exec (see fcntl(F_SETFD))
                       LCK       lock was applied
                       MP        memory-mapped
                       OPIP      open pending - in progress
                       RSVW      reserved wait
                       SHMT      UF_FSHMAT set (AIX)
                       USE       in use (multi-threaded)

       NODE-ID    (or INODE-ADDR for some dialects) contains a unique identifier for the file node (usually the ker‐
                  nel  vnode or inode address, but also occasionally a concatenation of device and node number) when
                  nn has been specified to ++ff;

       DEVICE     contains the device numbers, separated by commas, for a character special, block special, regular,
                  directory or NFS file;

                  or ``memory'' for a memory file system node under Tru64 UNIX;

                  or the address of the private data area of a Solaris socket stream;

                  or  a  kernel reference address that identifies the file (The kernel reference address may be used
                  for FIFO's, for example.);

                  or the base address or device name of a Linux AX.25 socket device.

                  Usually only the lower thirty two bits of Tru64 UNIX kernel addresses are displayed.

       SIZE, SIZE/OFF, or OFFSET
                  is the size of the file or the file offset in bytes.  A value is displayed in this column only  if
                  it  is  available.  _L_s_o_f displays whatever value - size or offset - is appropriate for the type of
                  the file and the version of _l_s_o_f.

                  On some UNIX dialects _l_s_o_f can't obtain accurate or consistent file offset  information  from  its
                  kernel  data sources, sometimes just for particular kinds of files (e.g., socket files.)  In other
                  cases, files don't have true sizes - e.g., sockets, FIFOs, pipes -  so  _l_s_o_f  displays  for  their
                  sizes  the  content  amounts it finds in their kernel buffer descriptors (e.g., socket buffer size
                  counts or TCP/IP window sizes.)  Consult the _l_s_o_f FAQ (The FFAAQQ section gives its  location.)   for
                  more information.

                  The  file size is displayed in decimal; the offset is normally displayed in decimal with a leading
                  ``0t'' if it contains 8 digits or less; in hexadecimal with a leading ``0x'' if it is longer  than
                  8  digits.   (Consult  the --oo _o option description for information on when 8 might default to some
                  other value.)

                  Thus the leading ``0t'' and ``0x'' identify an offset when the column may contain both a size  and
                  an offset (i.e., its title is SIZE/OFF).

                  If  the  --oo  option is specified, _l_s_o_f always displays the file offset (or nothing if no offset is
                  available) and labels the column OFFSET.  The offset  always  begins  with  ``0t''  or  ``0x''  as
                  described above.

                  The  _l_s_o_f  user  can  control  the switch from ``0t'' to ``0x'' with the --oo _o option.  Consult its
                  description for more information.

                  If the --ss option is specified, _l_s_o_f always displays the file size (or nothing if no size is avail‐
                  able)  and  labels the column SIZE.  The --oo and --ss options are mutually exclusive; they can't both
                  be specified.

                  For files that don't have a fixed size - e.g., don't reside on a disk device - _l_s_o_f  will  display
                  appropriate  information  about the current size or position of the file if it is available in the
                  kernel structures that define the file.

       NLINK      contains the file link count when ++LL has been specified;

       NODE       is the node number of a local file;

                  or the inode number of an NFS file in the server host;

                  or the Internet protocol type - e.g, ``TCP'';

                  or ``STR'' for a stream;

                  or ``CCITT'' for an HP-UX x.25 socket;

                  or the IRQ or inode number of a Linux AX.25 socket device.

       NAME       is the name of the mount point and file system on which the file resides;

                  or the name of a file specified in the _n_a_m_e_s option (after any symbolic links have been resolved);

                  or the name of a character special or block special device;

                  or the local and remote Internet addresses of a network file; the local host name or IP number  is
                  followed  by a colon (':'), the port, ``->'', and the two-part remote address; IP addresses may be
                  reported as numbers or names, depending on the ++||--MM, --nn, and --PP options; colon-separated IPv6 num‐
                  bers  are enclosed in square brackets; IPv4 INADDR_ANY and IPv6 IN6_IS_ADDR_UNSPECIFIED addresses,
                  and zero port numbers are represented by an asterisk ('*'); a UDP destination address may be  fol‐
                  lowed  by  the  amount of time elapsed since the last packet was sent to the destination; TCP, UDP
                  and UDPLITE remote addresses may be followed by TCP/TPI information in parentheses - state  (e.g.,
                  ``(ESTABLISHED)'', ``(Unbound)''), queue sizes, and window sizes (not all dialects) - in a fashion
                  similar to what _n_e_t_s_t_a_t(1) reports; see the --TT  option  description  or  the  description  of  the
                  TCP/TPI  field  in OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS for more information on state, queue size, and window
                  size;

                  or the address or name of a UNIX domain socket, possibly including a stream clone device  name,  a
                  file system object's path name, local and foreign kernel addresses, socket pair information, and a
                  bound vnode address;

                  or the local and remote mount point names of an NFS file;

                  or ``STR'', followed by the stream name;

                  or a stream character device name, followed by ``->'' and the stream name or a list of stream mod‐
                  ule names, separated by ``->'';

                  or ``STR:'' followed by the SCO OpenServer stream device and module names, separated by ``->'';

                  or  system  directory  name, `` -- '', and as many components of the path name as _l_s_o_f can find in
                  the kernel's name cache for selected dialects (See the KKEERRNNEELL NNAAMMEE CCAACCHHEE section for more informa‐
                  tion.);

                  or ``PIPE->'', followed by a Solaris kernel pipe destination address;

                  or  ``COMMON:'',  followed  by the vnode device information structure's device name, for a Solaris
                  common vnode;

                  or the address family, followed by a slash (`/'), followed by fourteen comma-separated bytes of  a
                  non-Internet raw socket address;

                  or  the  HP-UX x.25 local address, followed by the virtual connection number (if any), followed by
                  the remote address (if any);

                  or ``(dead)'' for disassociated Tru64 UNIX files - typically terminal files that have been flagged
                  with the TIOCNOTTY ioctl and closed by daemons;

                  or ``rd=<offset>'' and ``wr=<offset>'' for the values of the read and write offsets of a FIFO;

                  or  ``clone _n:/dev/event'' for SCO OpenServer file clones of the _/_d_e_v_/_e_v_e_n_t device, where _n is the
                  minor device number of the file;

                  or ``(socketpair: n)'' for a Solaris 2.6, 8, 9  or 10 UNIX domain socket, created by  the  _s_o_c_k_e_t_‐
                  _p_a_i_r(3N) network function;

                  or  ``no PCB'' for socket files that do not have a protocol block associated with them, optionally
                  followed by ``, CANTSENDMORE'' if sending on the socket has been disabled, or ``, CANTRCVMORE'' if
                  receiving on the socket has been disabled (e.g., by the _s_h_u_t_d_o_w_n(2) function);

                  or  the  local  and remote addresses of a Linux IPX socket file in the form <net>:[<node>:]<port>,
                  followed in parentheses by the transmit and receive queue sizes, and the connection state;

                  or ``dgram'' or ``stream'' for the type UnixWare 7.1.1 and above in-kernel  UNIX  domain  sockets,
                  followed  by  a  colon  (':')  and  the local path name when available, followed by ``->'' and the
                  remote path name or kernel socket address in hexadecimal when available;

                  or the association value, association index, endpoint value, local  address,  local  port,  remote
                  address and remote port for Linux SCTP sockets;

                  or ``protocol: '' followed by the Linux socket's protocol attribute.

       For  dialects  that  support  a ``namefs'' file system, allowing one file to be attached to another with _f_a_t_‐
       _t_a_c_h(3C), _l_s_o_f  will  add  ``(FA:<address1><direction><address2>)''  to  the  NAME  column.   <address1>  and
       <address2>  are hexadecimal vnode addresses.  <direction> will be ``<-'' if <address2> has been fattach'ed to
       this vnode whose address is <address1>; and ``->'' if <address1>, the vnode address of this vnode,  has  been
       fattach'ed to <address2>.  <address1> may be omitted if it already appears in the DEVICE column.

       _L_s_o_f  may add two parenthetical notes to the NAME column for open Solaris 10 files: ``(?)'' if _l_s_o_f considers
       the path name of questionable accuracy; and ``(deleted)'' if the  --XX  option  has  been  specified  and  _l_s_o_f
       detects  the  open  file's path name has been deleted.  Consult the _l_s_o_f FAQ (The FFAAQQ section gives its loca‐
       tion.)  for more information on these NAME column additions.

LLOOCCKKSS
       _L_s_o_f can't adequately report the wide variety of UNIX dialect file locks in  a  single  character.   What  it
       reports  in a single character is a compromise between the information it finds in the kernel and the limita‐
       tions of the reporting format.

       Moreover, when a process holds several byte level locks on a file, _l_s_o_f only reports the status of the  first
       lock  it  encounters.   If  it is a byte level lock, then the lock character will be reported in lower case -
       i.e., `r', `w', or `x' - rather than the upper case equivalent reported for a full file lock.

       Generally _l_s_o_f can only report on locks held by local processes on local files.  When a local process sets  a
       lock  on  a  remotely  mounted  (e.g., NFS) file, the remote server host usually records the lock state.  One
       exception is Solaris - at some patch levels of 2.3, and in all versions above 2.4, the Solaris kernel records
       information on remote locks in local structures.

       _L_s_o_f has trouble reporting locks for some UNIX dialects.  Consult the BBUUGGSS section of this manual page or the
       _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for more information.

OOUUTTPPUUTT FFOORR OOTTHHEERR PPRROOGGRRAAMMSS
       When the --FF option is specified, _l_s_o_f produces output that is suitable for processing by  another  program  -
       e.g, an _a_w_k or _P_e_r_l script, or a C program.

       Each unit of information is output in a field that is identified with a leading character and terminated by a
       NL (012) (or a NUL (000) if the 0 (zero) field identifier character is specified.)  The  data  of  the  field
       follows immediately after the field identification character and extends to the field terminator.

       It  is  possible  to think of field output as process and file sets.  A process set begins with a field whose
       identifier is `p' (for process IDentifier (PID)).  It extends to the beginning of the next PID field  or  the
       beginning  of  the  first  file  set  of the process, whichever comes first.  Included in the process set are
       fields that identify the command, the process group IDentification (PGID) number, the task (thread) ID (TID),
       and the user ID (UID) number or login name.

       A  file  set begins with a field whose identifier is `f' (for file descriptor).  It is followed by lines that
       describe the file's access mode, lock state, type, device, size, offset, inode,  protocol,  name  and  stream
       module names.  It extends to the beginning of the next file or process set, whichever comes first.

       When the NUL (000) field terminator has been selected with the 0 (zero) field identifier character, _l_s_o_f ends
       each process and file set with a NL (012) character.

       _L_s_o_f always produces one field, the PID (`p') field.  All other fields may  be  declared  optionally  in  the
       field  identifier  character list that follows the --FF option.  When a field selection character identifies an
       item _l_s_o_f does not normally list - e.g., PPID, selected with --RR - specification  of  the  field  character  -
       e.g., ``--FFRR'' - also selects the listing of the item.

       It  is entirely possible to select a set of fields that cannot easily be parsed - e.g., if the field descrip‐
       tor field is not selected, it may be difficult to identify file sets.  To help  you  avoid  this  difficulty,
       _l_s_o_f  supports  the  --FF  option; it selects the output of all fields with NL terminators (the --FF00 option pair
       selects the output of all fields with NUL terminators).  For compatibility reasons neither --FF nor --FF00  select
       the raw device field.

       These are the fields that _l_s_o_f will produce.  The single character listed first is the field identifier.

            a    file access mode
            c    process command name (all characters from proc or
                 user structure)
            C    file structure share count
            d    file's device character code
            D    file's major/minor device number (0x<hexadecimal>)
            f    file descriptor (always selected)
            F    file structure address (0x<hexadecimal>)
            G    file flaGs (0x<hexadecimal>; names if ++ffgg follows)
            g    process group ID
            i    file's inode number
            K    tasK ID
            k    link count
            l    file's lock status
            L    process login name
            m    marker between repeated output
            n    file name, comment, Internet address
            N    node identifier (ox<hexadecimal>
            o    file's offset (decimal)
            p    process ID (always selected)
            P    protocol name
            r    raw device number (0x<hexadecimal>)
            R    parent process ID
            s    file's size (decimal)
            S    file's stream identification
            t    file's type
            T    TCP/TPI information, identified by prefixes (the
                 `=' is part of the prefix):
                     QR=<read queue size>
                     QS=<send queue size>
                     SO=<socket options and values> (not all dialects)
                     SS=<socket states> (not all dialects)
                     ST=<connection state>
                     TF=<TCP flags and values> (not all dialects)
                     WR=<window read size>  (not all dialects)
                     WW=<window write size>  (not all dialects)
                 (TCP/TPI information isn't reported for all supported
                   UNIX dialects. The --hh or --?? help output for the
                   --TT option will show what TCP/TPI reporting can be
                   requested.)
            u    process user ID
            z    Solaris 10 and higher zone name
            Z    SELinux security context (inhibited when SELinux is disabled)
            0    use NUL field terminator character in place of NL
            1-9  dialect-specific field identifiers (The output
                 of --FF?? identifies the information to be found
                 in dialect-specific fields.)

       You can get on-line help information on these characters and their descriptions by specifying the --FF??  option
       pair.  (Escape the `?' character as your shell requires.)  Additional information on  field  content  can  be
       found in the OOUUTTPPUUTT section.

       As  an  example,  ``--FF ppccffnn'' will select the process ID (`p'), command name (`c'), file descriptor (`f') and
       file name (`n') fields with an NL field terminator character; ``--FF ppccffnn00'' selects the same output with a NUL
       (000) field terminator character.

       _L_s_o_f  doesn't  produce  all fields for every process or file set, only those that are available.  Some fields
       are mutually exclusive: file device characters and file major/minor device numbers;  file  inode  number  and
       protocol  name;  file name and stream identification; file size and offset.  One or the other member of these
       mutually exclusive sets will appear in field output, but not both.

       Normally _l_s_o_f ends each field with a NL (012) character.  The 0 (zero)  field  identifier  character  may  be
       specified to change the field terminator character to a NUL (000).  A NUL terminator may be easier to process
       with _x_a_r_g_s _(_1_)_, for example, or with programs whose quoting mechanisms may not easily cope with the range  of
       characters in the field output.  When the NUL field terminator is in use, _l_s_o_f ends each process and file set
       with a NL (012).

       Three aids to producing programs that can process _l_s_o_f field output are included in  the  _l_s_o_f  distribution.
       The  first  is a C header file, _l_s_o_f___f_i_e_l_d_s_._h, that contains symbols for the field identification characters,
       indexes for storing them in a table, and explanation strings that may be compiled into programs.   _L_s_o_f  uses
       this header file.

       The  second  aid  is  a  set of sample scripts that process field output, written in _a_w_k, _P_e_r_l 4, and _P_e_r_l 5.
       They're located in the _s_c_r_i_p_t_s subdirectory of the _l_s_o_f distribution.

       The third aid is the C library used for the _l_s_o_f test suite.  The test suite is written in C and  uses  field
       output  to validate the correct operation of _l_s_o_f.  The library can be found in the _t_e_s_t_s_/_L_T_l_i_b_._c file of the
       _l_s_o_f distribution.  The library uses the first aid, the _l_s_o_f___f_i_e_l_d_s_._h header file.

BBLLOOCCKKSS AANNDD TTIIMMEEOOUUTTSS
       _L_s_o_f can be blocked by some kernel functions that it uses - _l_s_t_a_t(2), _r_e_a_d_l_i_n_k(2), and _s_t_a_t(2).  These  func‐
       tions  are  stalled  in  the kernel, for example, when the hosts where mounted NFS file systems reside become
       inaccessible.

       _L_s_o_f attempts to break these blocks with timers and child processes, but the techniques are not wholly  reli‐
       able.   When _l_s_o_f does manage to break a block, it will report the break with an error message.  The messages
       may be suppressed with the --tt and --ww options.

       The default timeout value may be displayed with the --hh or --??  option, and it may be changed with the  --SS  _[_t_]
       option.   The  minimum for _t is two seconds, but you should avoid small values, since slow system responsive‐
       ness can cause short timeouts to expire unexpectedly and perhaps stop _l_s_o_f before it can produce any output.

       When _l_s_o_f has to break a block during its access of mounted file system information, it  normally  continues,
       although with less information available to display about open files.

       _L_s_o_f  can  also be directed to avoid the protection of timers and child processes when using the kernel func‐
       tions that might block by specifying the --OO option.  While this will allow _l_s_o_f to start up with  less  over‐
       head, it exposes _l_s_o_f completely to the kernel situations that might block it.  Use this option cautiously.

AAVVOOIIDDIINNGG KKEERRNNEELL BBLLOOCCKKSS
       You  can  use  the  --bb  option  to tell _l_s_o_f to avoid using kernel functions that would block.  Some cautions
       apply.

       First, using this option usually requires that your system supply alternate device numbers in  place  of  the
       device  numbers  that  _l_s_o_f  would  normally  obtain with the _l_s_t_a_t(2) and _s_t_a_t(2) kernel functions.  See the
       AALLTTEERRNNAATTEE DDEEVVIICCEE NNUUMMBBEERRSS section for more information on alternate device numbers.

       Second, you can't specify _n_a_m_e_s for _l_s_o_f to locate unless they're file system names.  This  is  because  _l_s_o_f
       needs  to know the device and inode numbers of files listed with _n_a_m_e_s in the _l_s_o_f options, and the --bb option
       prevents _l_s_o_f from obtaining them.  Moreover, since _l_s_o_f only has device numbers for the  file  systems  that
       have alternates, its ability to locate files on file systems depends completely on the availability and accu‐
       racy of the alternates.  If no alternates are available, or if they're  incorrect,  _l_s_o_f  won't  be  able  to
       locate files on the named file systems.

       Third, if the names of your file system directories that _l_s_o_f obtains from your system's mount table are sym‐
       bolic links, _l_s_o_f won't be able to resolve the links.  This is because the --bb option causes _l_s_o_f to avoid the
       kernel _r_e_a_d_l_i_n_k(2) function it uses to resolve symbolic links.

       Finally,  using the --bb option causes _l_s_o_f to issue warning messages when it needs to use the kernel functions
       that the --bb option directs it to avoid.  You can suppress these messages by specifying the --ww option, but  if
       you do, you won't see the alternate device numbers reported in the warning messages.

AALLTTEERRNNAATTEE DDEEVVIICCEE NNUUMMBBEERRSS
       On some dialects, when _l_s_o_f has to break a block because it can't get information about a mounted file system
       via the _l_s_t_a_t(2) and _s_t_a_t(2) kernel functions, or because you specified the --bb option, _l_s_o_f can  obtain  some
       of the information it needs - the device number and possibly the file system type - from the system mount ta‐
       ble.  When that is possible, _l_s_o_f will report the device number it obtained.  (You can suppress the report by
       specifying the --ww option.)

       You  can assist this process if your mount table is supported with an _/_e_t_c_/_m_t_a_b or _/_e_t_c_/_m_n_t_t_a_b file that con‐
       tains an options field by adding a ``dev=xxxx'' field for mount points that do not have one in their  options
       strings.   Note:  you must be able to edit the file - i.e., some mount tables like recent Solaris /etc/mnttab
       or Linux /proc/mounts are read-only and can't be modified.

       You may also be able to supply device numbers using the ++mm and ++mm _m options, provided they are  supported  by
       your dialect.  Check the output of _l_s_o_f_'_s --hh or --??  options to see if the ++mm and ++mm _m options are available.

       The  ``xxxx'' portion of the field is the hexadecimal value of the file system's device number.  (Consult the
       _s_t___d_e_v field of the output of the _l_s_t_a_t(2) and _s_t_a_t(2) functions for the appropriate  values  for  your  file
       systems.)  Here's an example from a Sun Solaris 2.6 _/_e_t_c_/_m_n_t_t_a_b for a file system remotely mounted via NFS:

            nfs  ignore,noquota,dev=2a40001

       There's  an  advantage  to  having ``dev=xxxx'' entries in your mount table file, especially for file systems
       that are mounted from remote NFS servers.  When a remote server crashes and you want to identify its users by
       running  _l_s_o_f  on one of its clients, _l_s_o_f probably won't be able to get output from the _l_s_t_a_t(2) and _s_t_a_t(2)
       functions for the file system.  If it can obtain the file system's device number from  the  mount  table,  it
       will be able to display the files open on the crashed NFS server.

       Some dialects that do not use an ASCII _/_e_t_c_/_m_t_a_b or _/_e_t_c_/_m_n_t_t_a_b file for the mount table may still provide an
       alternative device number in their internal mount tables.  This includes AIX, Apple Darwin, FreeBSD,  NetBSD,
       OpenBSD,  and Tru64 UNIX.  _L_s_o_f knows how to obtain the alternative device number for these dialects and uses
       it when its attempt to _l_s_t_a_t(2) or _s_t_a_t(2) the file system is blocked.

       If you're not sure your dialect supplies alternate device numbers for file systems from its mount table,  use
       this _l_s_o_f incantation to see if it reports any alternate device numbers:

              lsof -b

       Look for standard error file warning messages that begin ``assuming "dev=xxxx" from ...''.

KKEERRNNEELL NNAAMMEE CCAACCHHEE
       _L_s_o_f  is  able  to  examine  the  kernel's  name  cache  or  use other kernel facilities (e.g., the ADVFS 4.x
       tag_to_path() function under Tru64 UNIX) on some dialects for most file  system  types,  excluding  AFS,  and
       extract  recently  used  path  name components from it.  (AFS file system path lookups don't use the kernel's
       name cache; some Solaris VxFS file system operations apparently don't use it, either.)

       _L_s_o_f reports the complete paths it finds in the NAME column.  If _l_s_o_f can't report all components in a  path,
       it  reports  in the NAME column the file system name, followed by a space, two `-' characters, another space,
       and the name components it has located, separated by the `/' character.

       When _l_s_o_f is run in repeat mode - i.e., with the --rr option specified - the extent to which it can report path
       name  components  for the same file may vary from cycle to cycle.  That's because other running processes can
       cause the kernel to remove entries from its name cache and replace them with others.

       _L_s_o_f_'_s use of the kernel name cache to identify the paths of files can lead it to report incorrect components
       under  some  circumstances.   This can happen when the kernel name cache uses device and node number as a key
       (e.g., SCO OpenServer) and a key on a rapidly changing file system is reused.  If the UNIX  dialect's  kernel
       doesn't  purge  the  name  cache entry for a file when it is unlinked, _l_s_o_f may find a reference to the wrong
       entry in the cache.  The _l_s_o_f FAQ (The FFAAQQ section gives its location.)  has more information on this  situa‐
       tion.

       _L_s_o_f can report path name components for these dialects:

            FreeBSD
            HP-UX
            Linux
            NetBSD
            NEXTSTEP
            OpenBSD
            OPENSTEP
            SCO OpenServer
            SCO|Caldera UnixWare
            Solaris
            Tru64 UNIX

       _L_s_o_f can't report path name components for these dialects:

            AIX

       If  you  want to know why _l_s_o_f can't report path name components for some dialects, see the _l_s_o_f FAQ (The FFAAQQ
       section gives its location.)

DDEEVVIICCEE CCAACCHHEE FFIILLEE
       Examining all members of the _/_d_e_v (or _/_d_e_v_i_c_e_s) node tree with  _s_t_a_t(2)  functions  can  be  time  consuming.
       What's more, the information that _l_s_o_f needs - device number, inode number, and path - rarely changes.

       Consequently, _l_s_o_f normally maintains an ASCII text file of cached _/_d_e_v (or _/_d_e_v_i_c_e_s) information (exception:
       the /proc-based Linux _l_s_o_f where it's not needed.)  The local system administrator who builds _l_s_o_f  can  con‐
       trol the way the device cache file path is formed, selecting from these options:

            Path from the --DD option;
            Path from an environment variable;
            System-wide path;
            Personal path (the default);
            Personal path, modified by an environment variable.

       Consult  the  output of the --hh, --DD?? ,, or --??  help options for the current state of device cache support.  The
       help output lists the default read-mode device cache file path that is in effect for the  current  invocation
       of  _l_s_o_f.   The  --DD??   option  output lists the read-only and write device cache file paths, the names of any
       applicable environment variables, and the personal device cache path format.

       _L_s_o_f can detect that the current device cache file has been accidentally or maliciously modified by integrity
       checks,  including the computation and verification of a sixteen bit Cyclic Redundancy Check (CRC) sum on the
       file's contents.  When _l_s_o_f senses something wrong with the file, it issues a warning and attempts to  remove
       the current cache file and create a new copy, but only to a path that the process can legitimately write.

       The path from which a _l_s_o_f process may attempt to read a device cache file may not be the same as the path to
       which it can legitimately write.  Thus when _l_s_o_f senses that it needs to update the device cache file, it may
       choose a different path for writing it from the path from which it read an incorrect or outdated version.

       If  available,  the  --DDrr  option will inhibit the writing of a new device cache file.  (It's always available
       when specified without a path name argument.)

       When a new device is added to the system, the device cache file may need to be recreated.   Since  _l_s_o_f  com‐
       pares  the  mtime  of  the device cache file with the mtime and ctime of the _/_d_e_v (or _/_d_e_v_i_c_e_s) directory, it
       usually detects that a new device has been added; in that case _l_s_o_f issues a warning message and attempts  to
       rebuild the device cache file.

       Whenever _l_s_o_f writes a device cache file, it sets its ownership to the real UID of the executing process, and
       its permission modes to 0600, this restricting its reading and writing to the file's owner.

LLSSOOFF PPEERRMMIISSSSIIOONNSS TTHHAATT AAFFFFEECCTT DDEEVVIICCEE CCAACCHHEE FFIILLEE AACCCCEESSSS
       Two permissions of the _l_s_o_f executable affect its ability to access device cache files.  The permissions  are
       set by the local system administrator when _l_s_o_f is installed.

       The first and rarer permission is setuid-root.  It comes into effect when _l_s_o_f is executed; its effective UID
       is then root, while its real (i.e., that of the logged-on user) UID is not.  The _l_s_o_f distribution recommends
       that versions for these dialects run setuid-root.

            HP-UX 11.11 and 11.23
            Linux

       The  second  and more common permission is setgid.  It comes into effect when the effective group IDentifica‐
       tion number (GID) of the _l_s_o_f process is set to one that can access kernel memory devices -  e.g.,  ``kmem'',
       ``sys'', or ``system''.

       An _l_s_o_f process that has setgid permission usually surrenders the permission after it has accessed the kernel
       memory devices.  When it does that, _l_s_o_f can allow more liberal device cache path formations.  The _l_s_o_f  dis‐
       tribution  recommends  that versions for these dialects run setgid and be allowed to surrender setgid permis‐
       sion.

            AIX 5.[12] and 5.3-ML1
            Apple Darwin 7.x Power Macintosh systems
            FreeBSD 4.x, 4.1x, 5.x and [6789].x for x86-based systems
            FreeBSD 5.x and [6789].x for Alpha, AMD64 and Sparc64-based
                systems
            HP-UX 11.00
            NetBSD 1.[456], 2.x and 3.x for Alpha, x86, and SPARC-based
                systems
            NEXTSTEP 3.[13] for NEXTSTEP architectures
            OpenBSD 2.[89] and 3.[0-9] for x86-based systems
            OPENSTEP 4.x
            SCO OpenServer Release 5.0.6 for x86-based systems
            SCO|Caldera UnixWare 7.1.4 for x86-based systems
            Solaris 2.6, 8, 9 and 10
            Tru64 UNIX 5.1

       (Note: _l_s_o_f for AIX 5L and above needs setuid-root permission if its --XX option is used.)

       _L_s_o_f for these dialects does not support a device cache, so the permissions given  to  the  executable  don't
       apply to the device cache file.

            Linux

DDEEVVIICCEE CCAACCHHEE FFIILLEE PPAATTHH FFRROOMM TTHHEE --DD OOPPTTIIOONN
       The  --DD option provides limited means for specifying the device cache file path.  Its ??  function will report
       the read-only and write device cache file paths that _l_s_o_f will use.

       When the --DD bb, rr, and uu functions are available, you can use them to request that the cache file be built  in
       a  specific location (bb[_p_a_t_h]); read but not rebuilt (rr[_p_a_t_h]); or read and rebuilt (uu[_p_a_t_h]).  The bb, rr, and
       uu functions are restricted under some conditions.  They are restricted when the _l_s_o_f process is  setuid-root.
       The path specified with the rr function is always read-only, even when it is available.

       The  bb,  rr,  and uu functions are also restricted when the _l_s_o_f process runs setgid and _l_s_o_f doesn't surrender
       the setgid permission.  (See the LLSSOOFF PPEERRMMIISSSSIIOONNSS TTHHAATT AAFFFFEECCTT DDEEVVIICCEE CCAACCHHEE FFIILLEE AACCCCEESSSS section for a list  of
       implementations that normally don't surrender their setgid permission.)

       A further --DD function, ii (for ignore), is always available.

       When  available,  the bb function tells _l_s_o_f to read device information from the kernel with the _s_t_a_t(2) func‐
       tion and build a device cache file at the indicated path.

       When available, the rr function tells _l_s_o_f to read the device cache file, but not  update  it.   When  a  path
       argument accompanies --DDrr, it names the device cache file path.  The rr function is always available when it is
       specified without a path name argument.  If _l_s_o_f is not running setuid-root and surrenders its setgid permis‐
       sion, a path name argument may accompany the rr function.

       When available, the uu function tells _l_s_o_f to attempt to read and use the device cache file.  If it can't read
       the file, or if it finds the contents of the file incorrect or outdated, it will read  information  from  the
       kernel,  and  attempt  to  write an updated version of the device cache file, but only to a path it considers
       legitimate for the _l_s_o_f process effective and real UIDs.

DDEEVVIICCEE CCAACCHHEE PPAATTHH FFRROOMM AANN EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEE
       _L_s_o_f_'_s second choice for the device cache file is the contents of the LSOFDEVCACHE environment variable.   It
       avoids this choice if the _l_s_o_f process is setuid-root, or the real UID of the process is root.

       A  further  restriction applies to a device cache file path taken from the LSOFDEVCACHE environment variable:
       _l_s_o_f will not write a device cache file to the path if the _l_s_o_f process doesn't surrender its setgid  permis‐
       sion.   (See the LLSSOOFF PPEERRMMIISSSSIIOONNSS TTHHAATT AAFFFFEECCTT DDEEVVIICCEE CCAACCHHEE FFIILLEE AACCCCEESSSS section for information on implementa‐
       tions that don't surrender their setgid permission.)

       The local system administrator can disable the use of the LSOFDEVCACHE environment  variable  or  change  its
       name when building _l_s_o_f.  Consult the output of --DD??  for the environment variable's name.

SSYYSSTTEEMM--WWIIDDEE DDEEVVIICCEE CCAACCHHEE PPAATTHH
       The  local  system administrator may choose to have a system-wide device cache file when building _l_s_o_f.  That
       file will generally be constructed by a special system administration procedure when the system is booted  or
       when  the  contents  of  _/_d_e_v  or  _/_d_e_v_i_c_e_s)  changes.  If defined, it is _l_s_o_f_'_s third device cache file path
       choice.

       You can tell that a system-wide device cache file is in effect for your local installation by  examining  the
       _l_s_o_f help option output - i.e., the output from the --hh or --??  option.

       _L_s_o_f will never write to the system-wide device cache file path by default.  It must be explicitly named with
       a --DD function in a root-owned procedure.  Once the file has been written, the procedure must change its  per‐
       mission modes to 0644 (owner-read and owner-write, group-read, and other-read).

PPEERRSSOONNAALL DDEEVVIICCEE CCAACCHHEE PPAATTHH ((DDEEFFAAUULLTT))
       The default device cache file path of the _l_s_o_f distribution is one recorded in the home directory of the real
       UID that executes _l_s_o_f.  Added to the home directory is a second path component of the form _._l_s_o_f___h_o_s_t_n_a_m_e.

       This is _l_s_o_f_'_s fourth device cache file path choice, and is usually the default.   If  a  system-wide  device
       cache  file path was defined when _l_s_o_f was built, this fourth choice will be applied when _l_s_o_f can't find the
       system-wide device cache file.  This is the oonnllyy time _l_s_o_f uses two paths when reading the device cache file.

       The _h_o_s_t_n_a_m_e part of the second component is the base name of the executing host,  as  returned  by  _g_e_t_h_o_s_t_‐
       _n_a_m_e(2).   The  base name is defined to be the characters preceding the first `.'  in the _g_e_t_h_o_s_t_n_a_m_e(2) out‐
       put, or all the _g_e_t_h_o_s_t_n_a_m_e(2) output if it contains no `.'.

       The device cache file belongs to the user ID and is readable and writable by the user ID alone  -  i.e.,  its
       modes  are  0600.   Each distinct real user ID on a given host that executes _l_s_o_f has a distinct device cache
       file.  The _h_o_s_t_n_a_m_e part of the path distinguishes device cache files in an NFS-mounted home  directory  into
       which device cache files are written from several different hosts.

       The  personal  device  cache  file  path  formed by this method represents a device cache file that _l_s_o_f will
       attempt to read, and will attempt to write should it not exist or should its contents be  incorrect  or  out‐
       dated.

       The --DDrr option without a path name argument will inhibit the writing of a new device cache file.

       The --DD??  option will list the format specification for constructing the personal device cache file.  The con‐
       versions used in the format specification are described in the _0_0_D_C_A_C_H_E file of the _l_s_o_f distribution.

MMOODDIIFFIIEEDD PPEERRSSOONNAALL DDEEVVIICCEE CCAACCHHEE PPAATTHH
       If this option is defined by the local system administrator when _l_s_o_f is built, the  LSOFPERSDCPATH  environ‐
       ment variable contents may be used to add a component of the personal device cache file path.

       The  LSOFPERSDCPATH variable contents are inserted in the path at the place marked by the local system admin‐
       istrator with the ``%p'' conversion in the HASPERSDC format specification of the dialect's  _m_a_c_h_i_n_e_._h  header
       file.  (It's placed right after the home directory in the default _l_s_o_f distribution.)

       Thus,  for  example, if LSOFPERSDCPATH contains ``LSOF'', the home directory is ``/Homes/abe'', the host name
       is ``lsof.itap.purdue.edu'', and the HASPERSDC format is the default (``%h/%p.lsof_%L''), the  modified  per‐
       sonal device cache file path is:

            /Homes/abe/LSOF/.lsof_vic

       The  LSOFPERSDCPATH environment variable is ignored when the _l_s_o_f process is setuid-root or when the real UID
       of the process is root.

       _L_s_o_f will not write to a modified personal device cache file path if the _l_s_o_f process doesn't surrender  set‐
       gid  permission.  (See the LLSSOOFF PPEERRMMIISSSSIIOONNSS TTHHAATT AAFFFFEECCTT DDEEVVIICCEE CCAACCHHEE FFIILLEE AACCCCEESSSS section for a list of imple‐
       mentations that normally don't surrender their setgid permission.)

       If, for example, you want to create a sub-directory of personal device cache file paths by  using  the  LSOF‐
       PERSDCPATH  environment  variable to name it, and _l_s_o_f doesn't surrender its setgid permission, you will have
       to allow _l_s_o_f to create device cache files at the standard personal path and move them to  your  subdirectory
       with shell commands.

       The  local  system administrator may: disable this option when _l_s_o_f is built; change the name of the environ‐
       ment variable from LSOFPERSDCPATH to something else; change the HASPERSDC format to include the personal path
       component  in  another place; or exclude the personal path component entirely.  Consult the output of the --DD??
       option for the environment variable's name and the HASPERSDC format specification.

DDIIAAGGNNOOSSTTIICCSS
       Errors are identified with messages on the standard error file.

       _L_s_o_f returns a one (1) if any error was detected, including the failure to locate command names, file  names,
       Internet  addresses  or  files, login names, NFS files, PIDs, PGIDs, or UIDs it was asked to list.  If the --VV
       option is specified, _l_s_o_f will indicate the search items it failed to list.

       It returns a zero (0) if no errors were detected and if it was able to list some information  about  all  the
       specified search arguments.

       When _l_s_o_f cannot open access to _/_d_e_v (or _/_d_e_v_i_c_e_s) or one of its subdirectories, or get information on a file
       in them with _s_t_a_t(2), it issues a warning message and continues.  That _l_s_o_f will issue warning messages about
       inaccessible  files  in  _/_d_e_v  (or _/_d_e_v_i_c_e_s) is indicated in its help output - requested with the --hh or >B -?
       options -  with the message:

            Inaccessible /dev warnings are enabled.

       The warning message may be suppressed with the --ww option.  It may also have been  suppressed  by  the  system
       administrator  when _l_s_o_f was compiled by the setting of the WARNDEVACCESS definition.  In this case, the out‐
       put from the help options will include the message:

            Inaccessible /dev warnings are disabled.

       Inaccessible device warning messages usually disappear after _l_s_o_f has created a working device cache file.

EEXXAAMMPPLLEESS
       For a more extensive set of examples, documented more fully, see the _0_0_Q_U_I_C_K_S_T_A_R_T file of the _l_s_o_f  distribu‐
       tion.

       To list all open files, use:

              lsof

       To list all open Internet, x.25 (HP-UX), and UNIX domain files, use:

              lsof -i -U

       To list all open IPv4 network files in use by the process whose PID is 1234, use:

              lsof -i 4 -a -p 1234

       Presuming the UNIX dialect supports IPv6, to list only open IPv6 network files, use:

              lsof -i 6

       To list all files using any protocol on ports 513, 514, or 515 of host wonderland.cc.purdue.edu, use:

              lsof -i @wonderland.cc.purdue.edu:513-515

       To list all files using any protocol on any port of mace.cc.purdue.edu (cc.purdue.edu is the default domain),
       use:

              lsof -i @mace

       To list all open files for login name ``abe'', or user ID 1234, or process 456, or process  123,  or  process
       789, use:

              lsof -p 456,123,789 -u 1234,abe

       To list all open files on device /dev/hd4, use:

              lsof /dev/hd4

       To find the process that has /u/abe/foo open, use:

              lsof /u/abe/foo

       To send a SIGHUP to the processes that have /u/abe/bar open, use:

              kill -HUP `lsof -t /u/abe/bar`

       To find any open file, including an open UNIX domain socket file, with the name _/_d_e_v_/_l_o_g, use:

              lsof /dev/log

       To find processes with open files on the NFS file system named _/_n_f_s_/_m_o_u_n_t_/_p_o_i_n_t whose server is inaccessible,
       and presuming your mount table supplies the device number for _/_n_f_s_/_m_o_u_n_t_/_p_o_i_n_t, use:

              lsof -b /nfs/mount/point

       To do the preceding search with warning messages suppressed, use:

              lsof -bw /nfs/mount/point

       To ignore the device cache file, use:

              lsof -Di

       To obtain PID and command name field output for each process, file descriptor, file device number,  and  file
       inode number for each file of each process, use:

              lsof -FpcfDi

       To list the files at descriptors 1 and 3 of every process running the _l_s_o_f command for login ID ``abe'' every
       10 seconds, use:

              lsof -c lsof -a -d 1 -d 3 -u abe -r10

       To list the current working directory of processes running a command that is exactly four characters long and
       has an 'o' or 'O' in character three, use this regular expression form of the --cc _c option:

              lsof -c /^..o.$/i -a -d cwd

       To find an IP version 4 socket file by its associated numeric dot-form address, use:

              lsof -i@128.210.15.17

       To  find  an  IP  version  6  socket  file  (when  the  UNIX dialect supports IPv6) by its associated numeric
       colon-form address, use:

              lsof -i@[0:1:2:3:4:5:6:7]

       To find an IP version 6 socket file (when the UNIX dialect supports IPv6) by an associated numeric colon-form
       address that has a run of zeroes in it - e.g., the loop-back address - use:

              lsof -i@[::1]

       To obtain a repeat mode marker line that contains the current time, use:

              lsof -rm====%T====

       To add spaces to the previous marker line, use:

              lsof -r "m==== %T ===="

BBUUGGSS
       Since  _l_s_o_f  reads  kernel  memory  in  its search for open files, rapid changes in kernel memory may produce
       unpredictable results.

       When a file has multiple record locks, the lock status character (following the file descriptor)  is  derived
       from  a  test of the first lock structure, not from any combination of the individual record locks that might
       be described by multiple lock structures.

       _L_s_o_f can't search for files with restrictive access permissions by _n_a_m_e unless  it  is  installed  with  root
       set-UID  permission.   Otherwise  it is limited to searching for files to which its user or its set-GID group
       (if any) has access permission.

       The display of the destination address of a raw socket (e.g., for _p_i_n_g) depends on the UNIX operating system.
       Some dialects store the destination address in the raw socket's protocol control block, some do not.

       _L_s_o_f  can't  always represent Solaris device numbers in the same way that _l_s(1) does.  For example, the major
       and minor device numbers that the _l_s_t_a_t(2) and _s_t_a_t(2) functions report for the  directory  on  which  CD-ROM
       files are mounted (typically _/_c_d_r_o_m) are not the same as the ones that it reports for the device on which CD-
       ROM files are mounted (typically _/_d_e_v_/_s_r_0).  (_L_s_o_f reports the directory numbers.)

       The support for _/_p_r_o_c file systems is available only for BSD and Tru64 UNIX  dialects,  Linux,  and  dialects
       derived from SYSV R4 - e.g., FreeBSD, NetBSD, OpenBSD, Solaris, UnixWare.

       Some  _/_p_r_o_c  file  items  -  device  number,  inode number, and file size - are unavailable in some dialects.
       Searching for files in a _/_p_r_o_c file system may require that the full path name be specified.

       No text (ttxxtt) file descriptors are displayed for Linux processes.  All entries for files other than the  cur‐
       rent working directory, the root directory, and numerical file descriptors are labeled mmeemm descriptors.

       _L_s_o_f can't search for Tru64 UNIX named pipes by name, because their kernel implementation of lstat(2) returns
       an improper device number for a named pipe.

       _L_s_o_f can't report fully or correctly on HP-UX 9.01, 10.20, and 11.00 locks because of insufficient access  to
       kernel  data  or  errors  in  the  kernel  data.  See the _l_s_o_f FAQ (The FFAAQQ section gives its location.)  for
       details.

       The AIX SMT file type is a fabrication.  It's made up for file structures whose type (15)  isn't  defined  in
       the AIX _/_u_s_r_/_i_n_c_l_u_d_e_/_s_y_s_/_f_i_l_e_._h header file.  One way to create such file structures is to run X clients with
       the DISPLAY variable set to ``:0.0''.

       The ++||--ff_[_c_f_g_G_n_] option is not supported under /proc-based Linux _l_s_o_f, because it doesn't read  kernel  struc‐
       tures from kernel memory.

EENNVVIIRROONNMMEENNTT
       _L_s_o_f may access these environment variables.

       LANG              defines  a  language locale.  See _s_e_t_l_o_c_a_l_e(3) for the names of other variables that can be
                         used in place of LANG - e.g., LC_ALL, LC_TYPE, etc.

       LSOFDEVCACHE      defines the path to a device cache file.  See the DDEEVVIICCEE CCAACCHHEE  PPAATTHH  FFRROOMM  AANN  EENNVVIIRROONNMMEENNTT
                         VVAARRIIAABBLLEE section for more information.

       LSOFPERSDCPATH    defines  the middle component of a modified personal device cache file path.  See the MMOODDII‐‐
                         FFIIEEDD PPEERRSSOONNAALL DDEEVVIICCEE CCAACCHHEE PPAATTHH section for more information.

FFAAQQ
       Frequently-asked questions and their answers (an FAQ) are available in the _0_0_F_A_Q file of the  _l_s_o_f  distribu‐
       tion.

       That  file  is also available via anonymous ftp from _l_s_o_f_._i_t_a_p_._p_u_r_d_u_e_._e_d_u at _p_u_b_/_t_o_o_l_s_/_u_n_i_x_/_l_s_o_fFAQ_.  The URL
       is:

              ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/FAQ

FFIILLEESS
       _/_d_e_v_/_k_m_e_m         kernel virtual memory device

       _/_d_e_v_/_m_e_m          physical memory device

       _/_d_e_v_/_s_w_a_p         system paging device

       _._l_s_o_f___h_o_s_t_n_a_m_e    _l_s_o_f_'_s device cache file (The suffix, _h_o_s_t_n_a_m_e, is the first component of the  host's  name
                         returned by _g_e_t_h_o_s_t_n_a_m_e(2).)

AAUUTTHHOORRSS
       _L_s_o_f  was  written  by Victor A.Abell <abe@purdue.edu> of Purdue University.  Many others have contributed to
       _l_s_o_f.  They're listed in the _0_0_C_R_E_D_I_T_S file of the _l_s_o_f distribution.

DDIISSTTRRIIBBUUTTIIOONN
       The latest distribution of _l_s_o_f is available via anonymous ftp from the  host  _l_s_o_f_._i_t_a_p_._p_u_r_d_u_e_._e_d_u.   You'll
       find the _l_s_o_f distribution in the _p_u_b_/_t_o_o_l_s_/_u_n_i_x_/_l_s_o_f directory.

       You can also use this URL:

              ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof

       _L_s_o_f  is also mirrored elsewhere.  When you access _l_s_o_f_._i_t_a_p_._p_u_r_d_u_e_._e_d_u and change to its _p_u_b_/_t_o_o_l_s_/_u_n_i_x_/_l_s_o_f
       directory, you'll be given a list of some mirror sites.  The _p_u_b_/_t_o_o_l_s_/_u_n_i_x_/_l_s_o_f directory  also  contains  a
       more  complete  list  in its _m_i_r_r_o_r_s file.  Use mirrors with caution - not all mirrors always have the latest
       _l_s_o_f revision.

       Some pre-compiled _L_s_o_f executables are available on _l_s_o_f_._i_t_a_p_._p_u_r_d_u_e_._e_d_u, but their use is discouraged - it's
       better  that you build your own from the sources.  If you feel you must use a pre-compiled executable, please
       read the cautions that appear in the README files of the _p_u_b_/_t_o_o_l_s_/_u_n_i_x_/_l_s_o_f_/_b_i_n_a_r_i_e_s subdirectories  and  in
       the 00* files of the distribution.

       More  information  on the _l_s_o_f distribution can be found in its _R_E_A_D_M_E_._l_s_o_f___<_v_e_r_s_i_o_n_> file.  If you intend to
       get the _l_s_o_f distribution and build it, please read _R_E_A_D_M_E_._l_s_o_f___<_v_e_r_s_i_o_n_> and the other 00* files of the dis‐
       tribution before sending questions to the author.

SSEEEE AALLSSOO
       Not all the following manual pages may exist in every UNIX dialect to which _l_s_o_f has been ported.

       access(2),  awk(1),  crash(1),  fattach(3C),  ff(1), fstat(8), fuser(1), gethostname(2), isprint(3), kill(1),
       localtime(3), lstat(2), modload(8), mount(8), netstat(1), ofiles(8L),  perl(1),  ps(1),  readlink(2),  setlo‐
       cale(3), stat(2), strftime(3), time(2), uname(1).

                                                    Revision-4.89                                            LSOF(8)
